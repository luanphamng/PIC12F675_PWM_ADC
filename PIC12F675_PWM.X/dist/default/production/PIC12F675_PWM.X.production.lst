

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Oct 10 12:55:32 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x5E,2
    17  0000                     
    18                           ; Version 1.42
    19                           ; Generated 13/04/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F675 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0019                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  008C                     	;# 
    71  008E                     	;# 
    72  0090                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0096                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84                           
    85                           	psect	nvBANK0
    86  002B                     __pnvBANK0:	
    87  002B                     _ADC:	
    88  002B                     	ds	2
    89  002D                     _PWM:	
    90  002D                     	ds	1
    91  0005                     _GPIO	set	5
    92  0001                     _TMR0	set	1
    93  001E                     _ADRESH	set	30
    94  0019                     _CMCON	set	25
    95  001F                     _ADCON0	set	31
    96  002A                     _GP2	set	42
    97  0028                     _GP0	set	40
    98  005A                     _T0IF	set	90
    99  00F9                     _GO_nDONE	set	249
   100  005F                     _GIE	set	95
   101  005D                     _T0IE	set	93
   102  009E                     _ADRESL	set	158
   103  0099                     _VRCON	set	153
   104  0085                     _TRISIO	set	133
   105  009F                     _ANSEL	set	159
   106  0081                     _OPTION_REG	set	129
   107                           
   108                           ; #config settings
   109  0000                     
   110                           	psect	cinit
   111  0010                     start_initialization:	
   112  0010                     __initialization:	
   113  0010                     end_of_initialization:	
   114                           ;End of C runtime variable initialization code
   115                           
   116  0010                     __end_of__initialization:	
   117  0010  0183               	clrf	3
   118  0011  2842               	ljmp	_main	;jump to C main() function
   119                           
   120                           	psect	cstackCOMMON
   121  0000                     __pcstackCOMMON:	
   122  0000                     ??_CUS_delay_ms:	
   123  0000                     ??_InitADC:	
   124                           ; 1 bytes @ 0x0
   125                           
   126                           
   127                           	psect	cstackBANK0
   128  0020                     __pcstackBANK0:	
   129                           ; 1 bytes @ 0x0
   130                           
   131  0020                     ?_initPWM:	
   132  0020                     ?_InitADC:	
   133                           ; 1 bytes @ 0x0
   134                           
   135  0020                     ?_ISR:	
   136                           ; 1 bytes @ 0x0
   137                           
   138  0020                     ??_ISR:	
   139                           ; 1 bytes @ 0x0
   140                           
   141  0020                     ?_main:	
   142                           ; 1 bytes @ 0x0
   143                           
   144  0020                     InitADC@Channel:	
   145                           ; 1 bytes @ 0x0
   146                           
   147                           
   148                           ; 1 bytes @ 0x0
   149  0020                     	ds	4
   150  0024                     ?_CUS_delay_ms:	
   151  0024                     ??_initPWM:	
   152                           ; 1 bytes @ 0x4
   153                           
   154  0024                     CUS_delay_ms@i:	
   155                           ; 1 bytes @ 0x4
   156                           
   157                           
   158                           ; 2 bytes @ 0x4
   159  0024                     	ds	2
   160  0026                     ?_GetADCValue:	
   161                           
   162                           ; 2 bytes @ 0x6
   163  0026                     	ds	2
   164  0028                     ??_GetADCValue:	
   165                           
   166                           ; 1 bytes @ 0x8
   167  0028                     	ds	1
   168  0029                     GetADCValue@Channel:	
   169                           
   170                           ; 1 bytes @ 0x9
   171  0029                     	ds	1
   172  002A                     ??_main:	
   173                           
   174                           ; 1 bytes @ 0xA
   175  002A                     	ds	1
   176                           
   177                           	psect	maintext
   178  0042                     __pmaintext:	
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 102 in file "main.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : B00/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMMON   BANK0
   198 ;;      Params:         0       0
   199 ;;      Locals:         0       0
   200 ;;      Temps:          0       1
   201 ;;      Totals:         0       1
   202 ;;Total ram usage:        1 bytes
   203 ;; Hardware stack levels required when called:    3
   204 ;; This function calls:
   205 ;;		_CUS_delay_ms
   206 ;;		_GetADCValue
   207 ;;		_InitADC
   208 ;;		_initPWM
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           
   215                           ;psect for function _main
   216  0042                     _main:	
   217                           
   218                           ;main.c: 104: ANSEL = 0x00;
   219                           
   220                           ;incstack = 0
   221                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   222  0042  1683               	bsf	3,5	;RP0=1, select bank1
   223  0043  019F               	clrf	31	;volatile
   224                           
   225                           ;main.c: 105: ADCON0 = 0x00;
   226  0044  1283               	bcf	3,5	;RP0=0, select bank0
   227  0045  019F               	clrf	31	;volatile
   228                           
   229                           ;main.c: 106: CMCON = 0x07;
   230  0046  3007               	movlw	7
   231  0047  0099               	movwf	25	;volatile
   232                           
   233                           ;main.c: 107: VRCON = 0x00;
   234  0048  1683               	bsf	3,5	;RP0=1, select bank1
   235  0049  0199               	clrf	25	;volatile
   236                           
   237                           ;main.c: 108: TRISIO = 0x08;
   238  004A  3008               	movlw	8
   239  004B  0085               	movwf	5	;volatile
   240                           
   241                           ;main.c: 109: GPIO = 0x00;
   242  004C  1283               	bcf	3,5	;RP0=0, select bank0
   243  004D  0185               	clrf	5	;volatile
   244                           
   245                           ;main.c: 111: initPWM();
   246  004E  20A1               	fcall	_initPWM
   247                           
   248                           ;main.c: 112: GP2 = 1;
   249  004F  1283               	bcf	3,5	;RP0=0, select bank0
   250  0050  1505               	bsf	5,2	;volatile
   251                           
   252                           ;main.c: 114: InitADC(1);
   253  0051  3001               	movlw	1
   254  0052  2096               	fcall	_InitADC
   255                           
   256                           ;main.c: 118: PWM = 50;
   257  0053  3032               	movlw	50
   258  0054  1283               	bcf	3,5	;RP0=0, select bank0
   259  0055  00AA               	movwf	??_main
   260  0056  082A               	movf	??_main,w
   261  0057  00AD               	movwf	_PWM
   262  0058                     l713:	
   263                           ;main.c: 120: while(1)
   264                           
   265                           
   266                           ;main.c: 121: {
   267                           ;main.c: 122: ADC = GetADCValue(1);
   268  0058  3001               	movlw	1
   269  0059  2012               	fcall	_GetADCValue
   270  005A  1283               	bcf	3,5	;RP0=0, select bank0
   271  005B  0827               	movf	?_GetADCValue+1,w
   272  005C  00AC               	movwf	_ADC+1
   273  005D  0826               	movf	?_GetADCValue,w
   274  005E  00AB               	movwf	_ADC
   275                           
   276                           ;main.c: 123: if(ADC)
   277  005F  082B               	movf	_ADC,w
   278  0060  042C               	iorwf	_ADC+1,w
   279  0061  1903               	btfsc	3,2
   280  0062  2865               	goto	l719
   281                           
   282                           ;main.c: 124: {
   283                           ;main.c: 125: PWM = (unsigned char) ADC & 0xFF;
   284  0063  082B               	movf	_ADC,w
   285  0064  2866               	goto	L1
   286  0065                     l719:	
   287                           ;main.c: 126: }
   288                           
   289                           
   290                           ;main.c: 127: else
   291                           ;main.c: 128: {
   292                           ;main.c: 129: PWM = 50;
   293  0065  3032               	movlw	50
   294  0066                     L1:	
   295  0066  00AA               	movwf	??_main
   296  0067  082A               	movf	??_main,w
   297  0068  00AD               	movwf	_PWM
   298                           
   299                           ;main.c: 130: }
   300                           ;main.c: 131: CUS_delay_ms(200);
   301  0069  30C8               	movlw	200
   302  006A  00A4               	movwf	CUS_delay_ms@i
   303  006B  3000               	movlw	0
   304  006C  00A5               	movwf	CUS_delay_ms@i+1
   305  006D  2088               	fcall	_CUS_delay_ms
   306  006E  2858               	goto	l713
   307  006F                     __end_of_main:	
   308                           
   309                           	psect	text1
   310  00A1                     __ptext1:	
   311 ;; *************** function _initPWM *****************
   312 ;; Defined at:
   313 ;;		line 31 in file "main.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;		None
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, status,2, status,0
   322 ;; Tracked objects:
   323 ;;		On entry : 0/0
   324 ;;		On exit  : 0/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMMON   BANK0
   327 ;;      Params:         0       0
   328 ;;      Locals:         0       0
   329 ;;      Temps:          0       1
   330 ;;      Totals:         0       1
   331 ;;Total ram usage:        1 bytes
   332 ;; Hardware stack levels used:    1
   333 ;; Hardware stack levels required when called:    1
   334 ;; This function calls:
   335 ;;		Nothing
   336 ;; This function is called by:
   337 ;;		_main
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           
   342                           ;psect for function _initPWM
   343  00A1                     _initPWM:	
   344                           
   345                           ;main.c: 33: OPTION_REG &= 0xC0;
   346                           
   347                           ;incstack = 0
   348                           ; Regs used in _initPWM: [wreg+status,2+status,0]
   349  00A1  30C0               	movlw	192
   350  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   351  00A3  00A4               	movwf	??_initPWM
   352  00A4  0824               	movf	??_initPWM,w
   353  00A5  1683               	bsf	3,5	;RP0=1, select bank1
   354  00A6  0581               	andwf	1,f	;volatile
   355                           
   356                           ;main.c: 35: T0IE = 1;
   357  00A7  168B               	bsf	11,5	;volatile
   358                           
   359                           ;main.c: 36: GIE = 1;
   360  00A8  178B               	bsf	11,7	;volatile
   361  00A9  0008               	return
   362  00AA                     __end_of_initPWM:	
   363                           
   364                           	psect	text2
   365  0096                     __ptext2:	
   366 ;; *************** function _InitADC *****************
   367 ;; Defined at:
   368 ;;		line 39 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;  Channel         1    wreg     unsigned char 
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  Channel         1    0[BANK0 ] unsigned char 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, status,2
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0
   382 ;;      Params:         0       0
   383 ;;      Locals:         0       0
   384 ;;      Temps:          0       0
   385 ;;      Totals:         0       0
   386 ;;Total ram usage:        0 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; Hardware stack levels required when called:    1
   389 ;; This function calls:
   390 ;;		Nothing
   391 ;; This function is called by:
   392 ;;		_main
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           
   397                           ;psect for function _InitADC
   398  0096                     _InitADC:	
   399                           
   400                           ;main.c: 41: ANSEL |= 0x02;
   401                           
   402                           ;incstack = 0
   403                           ; Regs used in _InitADC: [wreg+status,2]
   404  0096  1683               	bsf	3,5	;RP0=1, select bank1
   405  0097  149F               	bsf	31,1	;volatile
   406                           
   407                           ;main.c: 42: TRISIO |= 0x02;
   408  0098  1485               	bsf	5,1	;volatile
   409                           
   410                           ;main.c: 43: ADCON0 = 0x81;
   411  0099  3081               	movlw	129
   412  009A  1283               	bcf	3,5	;RP0=0, select bank0
   413  009B  009F               	movwf	31	;volatile
   414                           
   415                           ;main.c: 44: CMCON = 0x07;
   416  009C  3007               	movlw	7
   417  009D  0099               	movwf	25	;volatile
   418                           
   419                           ;main.c: 45: VRCON = 0x00;
   420  009E  1683               	bsf	3,5	;RP0=1, select bank1
   421  009F  0199               	clrf	25	;volatile
   422  00A0  0008               	return
   423  00A1                     __end_of_InitADC:	
   424                           
   425                           	psect	text3
   426  0012                     __ptext3:	
   427 ;; *************** function _GetADCValue *****************
   428 ;; Defined at:
   429 ;;		line 57 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;  Channel         1    wreg     unsigned char 
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  Channel         1    9[BANK0 ] unsigned char 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  2    6[BANK0 ] unsigned int 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0
   443 ;;      Params:         0       2
   444 ;;      Locals:         0       1
   445 ;;      Temps:          0       1
   446 ;;      Totals:         0       4
   447 ;;Total ram usage:        4 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    2
   450 ;; This function calls:
   451 ;;		_CUS_delay_ms
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           
   458                           ;psect for function _GetADCValue
   459  0012                     _GetADCValue:	
   460                           
   461                           ;incstack = 0
   462                           ; Regs used in _GetADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   463                           ;GetADCValue@Channel stored from wreg
   464  0012  1283               	bcf	3,5	;RP0=0, select bank0
   465  0013  00A9               	movwf	GetADCValue@Channel
   466                           
   467                           ;main.c: 59: ADCON0 &= 0xf3;
   468  0014  30F3               	movlw	243
   469  0015  00A8               	movwf	??_GetADCValue
   470  0016  0828               	movf	??_GetADCValue,w
   471  0017  059F               	andwf	31,f	;volatile
   472                           
   473                           ;main.c: 61: switch(Channel)
   474  0018  2827               	goto	l669
   475  0019                     l659:	
   476                           ;main.c: 62: {
   477                           ;main.c: 63: case 0: ADCON0 |= 0x00; break;
   478                           
   479  0019  081F               	movf	31,w	;volatile
   480  001A  2832               	goto	l671
   481  001B                     l54:	
   482                           ;main.c: 64: case 1: ADCON0 |= 0x04; break;
   483                           
   484  001B  151F               	bsf	31,2	;volatile
   485  001C  2832               	goto	l671
   486  001D                     l55:	
   487                           ;main.c: 65: case 2: ADCON0 |= 0x08; break;
   488                           
   489  001D  159F               	bsf	31,3	;volatile
   490  001E  2832               	goto	l671
   491  001F                     l661:	
   492                           ;main.c: 66: case 3: ADCON0 |= 0x0c; break;
   493                           
   494  001F  300C               	movlw	12
   495  0020  00A8               	movwf	??_GetADCValue
   496  0021  0828               	movf	??_GetADCValue,w
   497  0022  049F               	iorwf	31,f	;volatile
   498  0023  2832               	goto	l671
   499  0024                     l663:	
   500                           ;main.c: 68: default: return 0;
   501                           
   502  0024  01A6               	clrf	?_GetADCValue
   503  0025  01A7               	clrf	?_GetADCValue+1
   504  0026  0008               	return
   505  0027                     l669:	
   506                           ;main.c: 69: }
   507                           
   508  0027  0829               	movf	GetADCValue@Channel,w
   509                           
   510                           ; Switch size 1, requested type "space"
   511                           ; Number of cases is 4, Range of values is 0 to 3
   512                           ; switch strategies available:
   513                           ; Name         Instructions Cycles
   514                           ; direct_byte           10     6 (fixed)
   515                           ; simple_byte           13     7 (average)
   516                           ; jumptable            260     6 (fixed)
   517                           ;	Chosen strategy is direct_byte
   518  0028  0084               	movwf	4
   519  0029  3004               	movlw	4
   520  002A  0204               	subwf	4,w
   521  002B  1803               	skipnc
   522  002C  2824               	goto	l663
   523  002D  3000               	movlw	high S743
   524  002E  008A               	movwf	10
   525  002F  30AA               	movlw	low S743
   526  0030  0704               	addwf	4,w
   527  0031  0082               	movwf	2
   528  0032                     l671:	
   529                           
   530                           ;main.c: 71: CUS_delay_ms(10);
   531  0032  300A               	movlw	10
   532  0033  00A4               	movwf	CUS_delay_ms@i
   533  0034  3000               	movlw	0
   534  0035  00A5               	movwf	CUS_delay_ms@i+1
   535  0036  2088               	fcall	_CUS_delay_ms
   536                           
   537                           ;main.c: 73: GO_nDONE = 1;
   538  0037  1283               	bcf	3,5	;RP0=0, select bank0
   539  0038  149F               	bsf	31,1	;volatile
   540  0039                     l59:	
   541                           ;main.c: 75: while(GO_nDONE);
   542                           
   543  0039  189F               	btfsc	31,1	;volatile
   544  003A  2839               	goto	l59
   545                           
   546                           ;main.c: 77: return ((ADRESH<<8)+ADRESL);
   547  003B  081E               	movf	30,w	;volatile
   548  003C  00A7               	movwf	?_GetADCValue+1
   549  003D  1683               	bsf	3,5	;RP0=1, select bank1
   550  003E  081E               	movf	30,w	;volatile
   551  003F  1283               	bcf	3,5	;RP0=0, select bank0
   552  0040  00A6               	movwf	?_GetADCValue
   553  0041  0008               	return
   554  0042                     __end_of_GetADCValue:	
   555                           
   556                           	psect	swtext1
   557  00AA                     __pswtext1:	
   558  00AA                     S743:	
   559  00AA  2819               	ljmp	l659
   560  00AB  281B               	ljmp	l54
   561  00AC  281D               	ljmp	l55
   562  00AD  281F               	ljmp	l661
   563                           
   564                           	psect	text4
   565  0088                     __ptext4:	
   566 ;; *************** function _CUS_delay_ms *****************
   567 ;; Defined at:
   568 ;;		line 16 in file "main.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;  i               2    4[BANK0 ] unsigned int 
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, status,2, status,0
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMMON   BANK0
   582 ;;      Params:         0       2
   583 ;;      Locals:         0       0
   584 ;;      Temps:          0       0
   585 ;;      Totals:         0       2
   586 ;;Total ram usage:        2 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    1
   589 ;; This function calls:
   590 ;;		Nothing
   591 ;; This function is called by:
   592 ;;		_GetADCValue
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           
   598                           ;psect for function _CUS_delay_ms
   599  0088                     _CUS_delay_ms:	
   600  0088                     l643:	
   601                           ;main.c: 18: while(i--);
   602                           
   603                           ;incstack = 0
   604                           ; Regs used in _CUS_delay_ms: [wreg+status,2+status,0]
   605                           
   606  0088  3001               	movlw	1
   607  0089  1283               	bcf	3,5	;RP0=0, select bank0
   608  008A  02A4               	subwf	CUS_delay_ms@i,f
   609  008B  3000               	movlw	0
   610  008C  1C03               	skipc
   611  008D  03A5               	decf	CUS_delay_ms@i+1,f
   612  008E  02A5               	subwf	CUS_delay_ms@i+1,f
   613  008F  0A24               	incf	CUS_delay_ms@i,w
   614  0090  1D03               	skipz
   615  0091  2888               	goto	l643
   616  0092  0A25               	incf	CUS_delay_ms@i+1,w
   617  0093  1903               	btfsc	3,2
   618  0094  0008               	return
   619  0095  2888               	goto	l643
   620  0096                     __end_of_CUS_delay_ms:	
   621                           
   622                           	psect	text5
   623  006F                     __ptext5:	
   624 ;; *************** function _ISR *****************
   625 ;; Defined at:
   626 ;;		line 80 in file "main.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;		None
   629 ;; Auto vars:     Size  Location     Type
   630 ;;		None
   631 ;; Return value:  Size  Location     Type
   632 ;;                  1    wreg      void 
   633 ;; Registers used:
   634 ;;		wreg, status,2, status,0
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMMON   BANK0
   640 ;;      Params:         0       0
   641 ;;      Locals:         0       0
   642 ;;      Temps:          0       4
   643 ;;      Totals:         0       4
   644 ;;Total ram usage:        4 bytes
   645 ;; Hardware stack levels used:    1
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		Interrupt level 1
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _ISR
   655  006F                     _ISR:	
   656                           
   657                           ;main.c: 82: if(T0IF)
   658  006F  1D0B               	btfss	11,2	;volatile
   659  0070  287D               	goto	i1l69
   660                           
   661                           ;main.c: 83: {
   662                           ;main.c: 84: if(GP0)
   663  0071  1C05               	btfss	5,0	;volatile
   664  0072  2877               	goto	i1l691
   665                           
   666                           ;main.c: 85: {
   667                           ;main.c: 86: TMR0 = PWM;
   668  0073  082D               	movf	_PWM,w
   669  0074  0081               	movwf	1	;volatile
   670                           
   671                           ;main.c: 87: GP0 = 0;
   672  0075  1005               	bcf	5,0	;volatile
   673                           
   674                           ;main.c: 88: }
   675  0076  287C               	goto	i1l695
   676  0077                     i1l691:	
   677                           
   678                           ;main.c: 89: else
   679                           ;main.c: 90: {
   680                           ;main.c: 91: TMR0 = 255 - PWM;
   681  0077  032D               	decf	_PWM,w
   682  0078  3AFF               	xorlw	255
   683  0079  3EFF               	addlw	255
   684  007A  0081               	movwf	1	;volatile
   685                           
   686                           ;main.c: 92: GP0 = 1;
   687  007B  1405               	bsf	5,0	;volatile
   688  007C                     i1l695:	
   689                           
   690                           ;main.c: 93: }
   691                           ;main.c: 95: T0IF = 0;
   692  007C  110B               	bcf	11,2	;volatile
   693  007D                     i1l69:	
   694  007D  0823               	movf	??_ISR+3,w
   695  007E  00DF               	movwf	95
   696  007F  0822               	movf	??_ISR+2,w
   697  0080  008A               	movwf	10
   698  0081  0821               	movf	??_ISR+1,w
   699  0082  0084               	movwf	4
   700  0083  0E20               	swapf	??_ISR^0,w
   701  0084  0083               	movwf	3
   702  0085  0EDE               	swapf	94,f
   703  0086  0E5E               	swapf	94,w
   704  0087  0009               	retfie
   705  0088                     __end_of_ISR:	
   706  005E                     btemp	set	94	;btemp
   707  005E                     wtemp0	set	94
   708                           
   709                           	psect	intentry
   710  0004                     __pintentry:	
   711                           ;incstack = 0
   712                           ; Regs used in _ISR: [wreg+status,2+status,0]
   713                           
   714  0004                     interrupt_function:	
   715  005E                     saved_w	set	btemp
   716  0004  00DE               	movwf	btemp
   717  0005  0E03               	swapf	3,w
   718  0006  1283               	bcf	3,5	;RP0=0, select bank0
   719  0007  00A0               	movwf	??_ISR
   720  0008  0804               	movf	4,w
   721  0009  00A1               	movwf	??_ISR+1
   722  000A  080A               	movf	10,w
   723  000B  00A2               	movwf	??_ISR+2
   724  000C  085F               	movf	btemp+1,w
   725  000D  00A3               	movwf	??_ISR+3
   726  000E  286F               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     11      14

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_GetADCValue
    _GetADCValue->_CUS_delay_ms

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     278
                                             10 BANK0      1     1      0
                       _CUS_delay_ms
                        _GetADCValue
                            _InitADC
                            _initPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GetADCValue                                          4     2      2     150
                                              6 BANK0      4     2      2
                       _CUS_delay_ms
 ---------------------------------------------------------------------------------
 (2) _CUS_delay_ms                                         2     0      2     128
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CUS_delay_ms
   _GetADCValue
     _CUS_delay_ms
   _InitADC
   _initPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      B       E       4       22.6%
ABS                  0      0       E       5        0.0%
DATA                 0      0       E       6        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Oct 10 12:55:32 2017

                      pc 0002              __CFG_CP$OFF 0000                       l54 001B  
                     l55 001D                       l59 0039                       fsr 0004  
                    S743 00AA                      _ADC 002B                      l713 0058  
                    l643 0088                      l661 001F                      l663 0024  
                    l671 0032                      l719 0065                      l659 0019  
                    l669 0027                      _GP0 0028                      _GP2 002A  
                    _GIE 005F             __CFG_CPD$OFF 0000                      _ISR 006F  
                    _PWM 002D                      fsr0 0004             __CFG_FOSC$XT 0000  
                   ?_ISR 0020                     _T0IE 005D                     _T0IF 005A  
                   _GPIO 0005                     i1l69 007D                     _TMR0 0001  
                   _main 0042                     btemp 005E            __CFG_BOREN$ON 0000  
            _GetADCValue 0012                     start 000F          __end_of_InitADC 00A1  
                  ??_ISR 0020                    ?_main 0020            __CFG_WDTE$OFF 0000  
                  _CMCON 0019                    _ANSEL 009F                    i1l691 0077  
                  i1l695 007C                    _VRCON 0099          __end_of_initPWM 00AA  
                  pclath 000A                    status 0003                    wtemp0 005E  
         __CFG_MCLRE$OFF 0000          __initialization 0010             __end_of_main 006F  
                 ??_main 002A                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E                   _TRISIO 0085                ??_InitADC 0000  
         __CFG_PWRTE$OFF 0000            ?_CUS_delay_ms 0024                ??_initPWM 0024  
                 saved_w 005E  __end_of__initialization 0010           __pcstackCOMMON 0000  
         ??_CUS_delay_ms 0000             ?_GetADCValue 0026               __pmaintext 0042  
             __pintentry 0004                  _InitADC 0096                  __ptext1 00A1  
                __ptext2 0096                  __ptext3 0012                  __ptext4 0088  
                __ptext5 006F             __size_of_ISR 0019                  _initPWM 00A1  
   __end_of_CUS_delay_ms 0096     end_of_initialization 0010     __size_of_GetADCValue 0030  
     GetADCValue@Channel 0029      start_initialization 0010              __end_of_ISR 0088  
  __size_of_CUS_delay_ms 000E                ___latbits 0000            __pcstackBANK0 0020  
               ?_InitADC 0020                __pnvBANK0 002B             _CUS_delay_ms 0088  
              __pswtext1 00AA                 ?_initPWM 0020        interrupt_function 0004  
               _GO_nDONE 00F9         __size_of_InitADC 000B         __size_of_initPWM 0009  
          __size_of_main 002D            ??_GetADCValue 0028                 intlevel1 0000  
    __end_of_GetADCValue 0042               _OPTION_REG 0081            CUS_delay_ms@i 0024  
         InitADC@Channel 0020  
