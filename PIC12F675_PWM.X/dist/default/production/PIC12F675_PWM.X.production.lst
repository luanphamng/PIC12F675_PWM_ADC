

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Oct 14 05:12:30 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	swtext1,local,class=CONST,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC12F683 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0019                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0090                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0096                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88                           
    89                           	psect	nvBANK0
    90  002B                     __pnvBANK0:	
    91  002B                     _StartTime:	
    92  002B                     	ds	2
    93  002D                     _PWM:	
    94  002D                     	ds	1
    95  0005                     _GPIO	set	5
    96  0001                     _TMR0	set	1
    97  001E                     _ADRESH	set	30
    98  0019                     _CMCON	set	25
    99  001F                     _ADCON0	set	31
   100  002A                     _GP2	set	42
   101  0028                     _GP0	set	40
   102  005A                     _T0IF	set	90
   103  00F9                     _GO_nDONE	set	249
   104  005F                     _GIE	set	95
   105  005D                     _T0IE	set	93
   106  009E                     _ADRESL	set	158
   107  0099                     _VRCON	set	153
   108  0085                     _TRISIO	set	133
   109  009F                     _ANSEL	set	159
   110  0081                     _OPTION_REG	set	129
   111                           
   112                           ; #config settings
   113  0000                     
   114                           	psect	cinit
   115  0010                     start_initialization:	
   116  0010                     __initialization:	
   117                           
   118                           ; Clear objects allocated to COMMON
   119  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   120  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   121  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   122  0013                     end_of_initialization:	
   123                           ;End of C runtime variable initialization code
   124                           
   125  0013                     __end_of__initialization:	
   126  0013  0183               	clrf	3
   127  0014  2815               	ljmp	_main	;jump to C main() function
   128                           
   129                           	psect	bssCOMMON
   130  0076                     __pbssCOMMON:	
   131  0076                     _ADC:	
   132  0076                     	ds	2
   133  0078                     _cycle:	
   134  0078                     	ds	1
   135                           
   136                           	psect	cstackCOMMON
   137  0070                     __pcstackCOMMON:	
   138  0070                     ?_initPWM:	
   139  0070                     ?_InitADC:	
   140                           ; 1 bytes @ 0x0
   141                           
   142  0070                     ?_ISR:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0070                     ??_ISR:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0070                     ?_main:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0070                     InitADC@Channel:	
   152                           ; 1 bytes @ 0x0
   153                           
   154                           
   155                           ; 1 bytes @ 0x0
   156  0070                     	ds	5
   157  0075                     ??_DELAY_us:	
   158  0075                     ??_DELAY_ms:	
   159                           ; 1 bytes @ 0x5
   160                           
   161  0075                     ??_initPWM:	
   162                           ; 1 bytes @ 0x5
   163                           
   164  0075                     ??_InitADC:	
   165                           ; 1 bytes @ 0x5
   166                           
   167  0075                     ??_GetADCValue:	
   168                           ; 1 bytes @ 0x5
   169                           
   170  0075                     ??___wmul:	
   171                           ; 1 bytes @ 0x5
   172                           
   173  0075                     ?___bmul:	
   174                           ; 1 bytes @ 0x5
   175                           
   176  0075                     ___bmul@multiplicand:	
   177                           ; 1 bytes @ 0x5
   178                           
   179                           
   180                           ; 1 bytes @ 0x5
   181  0075                     	ds	1
   182                           
   183                           	psect	cstackBANK0
   184  0020                     __pcstackBANK0:	
   185  0020                     ?_DELAY_us:	
   186  0020                     ??___bmul:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0020                     ?___wmul:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0020                     DELAY_us@us_count:	
   193                           ; 2 bytes @ 0x0
   194                           
   195  0020                     ___wmul@multiplier:	
   196                           ; 2 bytes @ 0x0
   197                           
   198                           
   199                           ; 2 bytes @ 0x0
   200  0020                     	ds	1
   201  0021                     ___bmul@product:	
   202                           
   203                           ; 1 bytes @ 0x1
   204  0021                     	ds	1
   205  0022                     ?_GetADCValue:	
   206  0022                     ___bmul@multiplier:	
   207                           ; 2 bytes @ 0x2
   208                           
   209  0022                     ___wmul@multiplicand:	
   210                           ; 1 bytes @ 0x2
   211                           
   212                           
   213                           ; 2 bytes @ 0x2
   214  0022                     	ds	2
   215  0024                     GetADCValue@Channel:	
   216  0024                     ___wmul@product:	
   217                           ; 1 bytes @ 0x4
   218                           
   219                           
   220                           ; 2 bytes @ 0x4
   221  0024                     	ds	2
   222  0026                     ?_DELAY_ms:	
   223  0026                     DELAY_ms@ms_count:	
   224                           ; 1 bytes @ 0x6
   225                           
   226                           
   227                           ; 2 bytes @ 0x6
   228  0026                     	ds	2
   229  0028                     ??_main:	
   230                           
   231                           ; 1 bytes @ 0x8
   232  0028                     	ds	2
   233  002A                     main@i:	
   234                           
   235                           ; 1 bytes @ 0xA
   236  002A                     	ds	1
   237                           
   238                           	psect	maintext
   239  0015                     __pmaintext:	
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 109 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;  i               1   10[BANK0 ] unsigned char 
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : B00/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMMON   BANK0   BANK1
   259 ;;      Params:         0       0       0
   260 ;;      Locals:         0       1       0
   261 ;;      Temps:          0       2       0
   262 ;;      Totals:         0       3       0
   263 ;;Total ram usage:        3 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_DELAY_ms
   267 ;;		_GetADCValue
   268 ;;		_InitADC
   269 ;;		___bmul
   270 ;;		___wmul
   271 ;;		_initPWM
   272 ;; This function is called by:
   273 ;;		Startup code after reset
   274 ;; This function uses a non-reentrant model
   275 ;;
   276                           
   277                           
   278                           ;psect for function _main
   279  0015                     _main:	
   280                           
   281                           ;main.c: 111: ANSEL = 0x00;
   282                           
   283                           ;incstack = 0
   284                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   285  0015  1683               	bsf	3,5	;RP0=1, select bank1
   286  0016  019F               	clrf	31	;volatile
   287                           
   288                           ;main.c: 112: ADCON0 = 0x00;
   289  0017  1283               	bcf	3,5	;RP0=0, select bank0
   290  0018  019F               	clrf	31	;volatile
   291                           
   292                           ;main.c: 113: CMCON = 0x07;
   293  0019  3007               	movlw	7
   294  001A  0099               	movwf	25	;volatile
   295                           
   296                           ;main.c: 114: VRCON = 0x00;
   297  001B  1683               	bsf	3,5	;RP0=1, select bank1
   298  001C  0199               	clrf	25	;volatile
   299                           
   300                           ;main.c: 115: TRISIO = 0x08;
   301  001D  3008               	movlw	8
   302  001E  0085               	movwf	5	;volatile
   303                           
   304                           ;main.c: 116: GPIO = 0x00;
   305  001F  1283               	bcf	3,5	;RP0=0, select bank0
   306  0020  0185               	clrf	5	;volatile
   307                           
   308                           ;main.c: 118: initPWM();
   309  0021  2112               	fcall	_initPWM
   310                           
   311                           ;main.c: 119: GP2 = 1;
   312  0022  1283               	bcf	3,5	;RP0=0, select bank0
   313  0023  1505               	bsf	5,2	;volatile
   314                           
   315                           ;main.c: 121: InitADC(1);
   316  0024  3001               	movlw	1
   317  0025  2107               	fcall	_InitADC
   318                           
   319                           ;main.c: 124: unsigned char i;
   320                           ;main.c: 127: PWM = 80;
   321  0026  3050               	movlw	80
   322  0027  1283               	bcf	3,5	;RP0=0, select bank0
   323  0028  00A8               	movwf	??_main
   324  0029  0828               	movf	??_main,w
   325  002A  00AD               	movwf	_PWM
   326                           
   327                           ;main.c: 130: {
   328                           ;main.c: 131: StartTime = GetADCValue(1);
   329                           
   330                           ;main.c: 129: while(1)
   331  002B  3001               	movlw	1
   332  002C  205D               	fcall	_GetADCValue
   333  002D  1283               	bcf	3,5	;RP0=0, select bank0
   334  002E  0823               	movf	?_GetADCValue+1,w
   335  002F  00AC               	movwf	_StartTime+1
   336  0030  0822               	movf	?_GetADCValue,w
   337  0031  00AB               	movwf	_StartTime
   338                           
   339                           ;main.c: 137: {
   340                           ;main.c: 139: }
   341                           ;main.c: 141: for(i = 8; i < 21; i++)
   342  0032  3008               	movlw	8
   343  0033  00A8               	movwf	??_main
   344  0034  0828               	movf	??_main,w
   345  0035  00AA               	movwf	main@i
   346  0036  3015               	movlw	21
   347  0037  022A               	subwf	main@i,w
   348  0038  1803               	btfsc	3,0
   349  0039  285C               	goto	l82
   350  003A                     l976:	
   351                           
   352                           ;main.c: 142: {
   353                           ;main.c: 143: PWM = i*10;
   354  003A  300A               	movlw	10
   355  003B  00A8               	movwf	??_main
   356  003C  0828               	movf	??_main,w
   357  003D  00F5               	movwf	___bmul@multiplicand
   358  003E  082A               	movf	main@i,w
   359  003F  20E8               	fcall	___bmul
   360  0040  1283               	bcf	3,5	;RP0=0, select bank0
   361  0041  00A9               	movwf	??_main+1
   362  0042  0829               	movf	??_main+1,w
   363  0043  00AD               	movwf	_PWM
   364                           
   365                           ;main.c: 144: DELAY_ms(StartTime*10);
   366  0044  082C               	movf	_StartTime+1,w
   367  0045  00A1               	movwf	___wmul@multiplier+1
   368  0046  082B               	movf	_StartTime,w
   369  0047  00A0               	movwf	___wmul@multiplier
   370  0048  300A               	movlw	10
   371  0049  00A2               	movwf	___wmul@multiplicand
   372  004A  3000               	movlw	0
   373  004B  00A3               	movwf	___wmul@multiplicand+1
   374  004C  20B3               	fcall	___wmul
   375  004D  1283               	bcf	3,5	;RP0=0, select bank0
   376  004E  0821               	movf	?___wmul+1,w
   377  004F  00A7               	movwf	DELAY_ms@ms_count+1
   378  0050  0820               	movf	?___wmul,w
   379  0051  00A6               	movwf	DELAY_ms@ms_count
   380  0052  20D5               	fcall	_DELAY_ms
   381  0053  3001               	movlw	1
   382  0054  1283               	bcf	3,5	;RP0=0, select bank0
   383  0055  00A8               	movwf	??_main
   384  0056  0828               	movf	??_main,w
   385  0057  07AA               	addwf	main@i,f
   386  0058  3015               	movlw	21
   387  0059  022A               	subwf	main@i,w
   388  005A  1C03               	skipc
   389  005B  283A               	goto	l976
   390  005C                     l82:	
   391                           ;main.c: 145: }
   392                           ;main.c: 146: while(1);
   393                           
   394  005C  285C               	goto	l82
   395  005D                     __end_of_main:	
   396                           
   397                           	psect	text1
   398  0112                     __ptext1:	
   399 ;; *************** function _initPWM *****************
   400 ;; Defined at:
   401 ;;		line 30 in file "main.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1
   415 ;;      Params:         0       0       0
   416 ;;      Locals:         0       0       0
   417 ;;      Temps:          1       0       0
   418 ;;      Totals:         1       0       0
   419 ;;Total ram usage:        1 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           
   430                           ;psect for function _initPWM
   431  0112                     _initPWM:	
   432                           
   433                           ;main.c: 32: OPTION_REG &= 0xC0;
   434                           
   435                           ;incstack = 0
   436                           ; Regs used in _initPWM: [wreg+status,2+status,0]
   437  0112  30C0               	movlw	192
   438  0113  00F5               	movwf	??_initPWM
   439  0114  0875               	movf	??_initPWM,w
   440  0115  1683               	bsf	3,5	;RP0=1, select bank1
   441  0116  0581               	andwf	1,f	;volatile
   442                           
   443                           ;main.c: 34: T0IE = 1;
   444  0117  168B               	bsf	11,5	;volatile
   445                           
   446                           ;main.c: 35: GIE = 1;
   447  0118  178B               	bsf	11,7	;volatile
   448  0119  0008               	return
   449  011A                     __end_of_initPWM:	
   450                           
   451                           	psect	text2
   452  00B3                     __ptext2:	
   453 ;; *************** function ___wmul *****************
   454 ;; Defined at:
   455 ;;		line 15 in file "/usr/microchip/xc8/v1.43/sources/common/Umul16.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;  multiplier      2    0[BANK0 ] unsigned int 
   458 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   459 ;; Auto vars:     Size  Location     Type
   460 ;;  product         2    4[BANK0 ] unsigned int 
   461 ;; Return value:  Size  Location     Type
   462 ;;                  2    0[BANK0 ] unsigned int 
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0
   465 ;; Tracked objects:
   466 ;;		On entry : 0/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1
   470 ;;      Params:         0       4       0
   471 ;;      Locals:         0       2       0
   472 ;;      Temps:          0       0       0
   473 ;;      Totals:         0       6       0
   474 ;;Total ram usage:        6 bytes
   475 ;; Hardware stack levels used:    1
   476 ;; Hardware stack levels required when called:    1
   477 ;; This function calls:
   478 ;;		Nothing
   479 ;; This function is called by:
   480 ;;		_main
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           
   485                           ;psect for function ___wmul
   486  00B3                     ___wmul:	
   487                           
   488                           ;incstack = 0
   489                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   490  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   491  00B4  01A4               	clrf	___wmul@product
   492  00B5  01A5               	clrf	___wmul@product+1
   493  00B6                     l926:	
   494  00B6  1C20               	btfss	___wmul@multiplier,0
   495  00B7  28BE               	goto	l188
   496  00B8  0822               	movf	___wmul@multiplicand,w
   497  00B9  07A4               	addwf	___wmul@product,f
   498  00BA  1803               	skipnc
   499  00BB  0AA5               	incf	___wmul@product+1,f
   500  00BC  0823               	movf	___wmul@multiplicand+1,w
   501  00BD  07A5               	addwf	___wmul@product+1,f
   502  00BE                     l188:	
   503  00BE  3001               	movlw	1
   504  00BF                     u375:	
   505  00BF  1003               	clrc
   506  00C0  0DA2               	rlf	___wmul@multiplicand,f
   507  00C1  0DA3               	rlf	___wmul@multiplicand+1,f
   508  00C2  3EFF               	addlw	-1
   509  00C3  1D03               	skipz
   510  00C4  28BF               	goto	u375
   511  00C5  3001               	movlw	1
   512  00C6                     u385:	
   513  00C6  1003               	clrc
   514  00C7  0CA1               	rrf	___wmul@multiplier+1,f
   515  00C8  0CA0               	rrf	___wmul@multiplier,f
   516  00C9  3EFF               	addlw	-1
   517  00CA  1D03               	skipz
   518  00CB  28C6               	goto	u385
   519  00CC  0820               	movf	___wmul@multiplier,w
   520  00CD  0421               	iorwf	___wmul@multiplier+1,w
   521  00CE  1D03               	btfss	3,2
   522  00CF  28B6               	goto	l926
   523  00D0  0825               	movf	___wmul@product+1,w
   524  00D1  00A1               	movwf	?___wmul+1
   525  00D2  0824               	movf	___wmul@product,w
   526  00D3  00A0               	movwf	?___wmul
   527  00D4  0008               	return
   528  00D5                     __end_of___wmul:	
   529                           
   530                           	psect	text3
   531  00E8                     __ptext3:	
   532 ;; *************** function ___bmul *****************
   533 ;; Defined at:
   534 ;;		line 4 in file "/usr/microchip/xc8/v1.43/sources/common/Umul8.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;  multiplier      1    wreg     unsigned char 
   537 ;;  multiplicand    1    5[COMMON] unsigned char 
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  multiplier      1    2[BANK0 ] unsigned char 
   540 ;;  product         1    1[BANK0 ] unsigned char 
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      unsigned char 
   543 ;; Registers used:
   544 ;;		wreg, status,2, status,0
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1
   550 ;;      Params:         1       0       0
   551 ;;      Locals:         0       2       0
   552 ;;      Temps:          0       1       0
   553 ;;      Totals:         1       3       0
   554 ;;Total ram usage:        4 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    1
   557 ;; This function calls:
   558 ;;		Nothing
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           
   565                           ;psect for function ___bmul
   566  00E8                     ___bmul:	
   567                           
   568                           ;incstack = 0
   569                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   570                           ;___bmul@multiplier stored from wreg
   571  00E8  1283               	bcf	3,5	;RP0=0, select bank0
   572  00E9  00A2               	movwf	___bmul@multiplier
   573  00EA  01A1               	clrf	___bmul@product
   574  00EB                     l940:	
   575  00EB  1C22               	btfss	___bmul@multiplier,0
   576  00EC  28F1               	goto	l944
   577  00ED  0875               	movf	___bmul@multiplicand,w
   578  00EE  00A0               	movwf	??___bmul
   579  00EF  0820               	movf	??___bmul,w
   580  00F0  07A1               	addwf	___bmul@product,f
   581  00F1                     l944:	
   582  00F1  1003               	clrc
   583  00F2  0DF5               	rlf	___bmul@multiplicand,f
   584  00F3  1003               	clrc
   585  00F4  0CA2               	rrf	___bmul@multiplier,f
   586  00F5  0822               	movf	___bmul@multiplier,w
   587  00F6  1D03               	btfss	3,2
   588  00F7  28EB               	goto	l940
   589  00F8  0821               	movf	___bmul@product,w
   590  00F9  0008               	return
   591  00FA                     __end_of___bmul:	
   592                           
   593                           	psect	text4
   594  0107                     __ptext4:	
   595 ;; *************** function _InitADC *****************
   596 ;; Defined at:
   597 ;;		line 38 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  Channel         1    wreg     unsigned char 
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  Channel         1    0[COMMON] unsigned char 
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, status,2
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1
   611 ;;      Params:         0       0       0
   612 ;;      Locals:         0       0       0
   613 ;;      Temps:          0       0       0
   614 ;;      Totals:         0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    1
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           
   626                           ;psect for function _InitADC
   627  0107                     _InitADC:	
   628                           
   629                           ;main.c: 40: ANSEL |= 0x02;
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _InitADC: [wreg+status,2]
   633  0107  1683               	bsf	3,5	;RP0=1, select bank1
   634  0108  149F               	bsf	31,1	;volatile
   635                           
   636                           ;main.c: 41: TRISIO |= 0x02;
   637  0109  1485               	bsf	5,1	;volatile
   638                           
   639                           ;main.c: 42: ADCON0 = 0x81;
   640  010A  3081               	movlw	129
   641  010B  1283               	bcf	3,5	;RP0=0, select bank0
   642  010C  009F               	movwf	31	;volatile
   643                           
   644                           ;main.c: 43: CMCON = 0x07;
   645  010D  3007               	movlw	7
   646  010E  0099               	movwf	25	;volatile
   647                           
   648                           ;main.c: 44: VRCON = 0x00;
   649  010F  1683               	bsf	3,5	;RP0=1, select bank1
   650  0110  0199               	clrf	25	;volatile
   651  0111  0008               	return
   652  0112                     __end_of_InitADC:	
   653                           
   654                           	psect	text5
   655  005D                     __ptext5:	
   656 ;; *************** function _GetADCValue *****************
   657 ;; Defined at:
   658 ;;		line 56 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;  Channel         1    wreg     unsigned char 
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  Channel         1    4[BANK0 ] unsigned char 
   663 ;; Return value:  Size  Location     Type
   664 ;;                  2    2[BANK0 ] unsigned int 
   665 ;; Registers used:
   666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : 0/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMMON   BANK0   BANK1
   672 ;;      Params:         0       2       0
   673 ;;      Locals:         0       1       0
   674 ;;      Temps:          1       0       0
   675 ;;      Totals:         1       3       0
   676 ;;Total ram usage:        4 bytes
   677 ;; Hardware stack levels used:    1
   678 ;; Hardware stack levels required when called:    2
   679 ;; This function calls:
   680 ;;		_DELAY_us
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           
   687                           ;psect for function _GetADCValue
   688  005D                     _GetADCValue:	
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _GetADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   692                           ;GetADCValue@Channel stored from wreg
   693  005D  1283               	bcf	3,5	;RP0=0, select bank0
   694  005E  00A4               	movwf	GetADCValue@Channel
   695                           
   696                           ;main.c: 58: ADCON0 &= 0xf3;
   697  005F  30F3               	movlw	243
   698  0060  00F5               	movwf	??_GetADCValue
   699  0061  0875               	movf	??_GetADCValue,w
   700  0062  059F               	andwf	31,f	;volatile
   701                           
   702                           ;main.c: 60: switch(Channel)
   703  0063  2872               	goto	l902
   704  0064                     l892:	
   705                           ;main.c: 61: {
   706                           ;main.c: 62: case 0: ADCON0 |= 0x00; break;
   707                           
   708  0064  081F               	movf	31,w	;volatile
   709  0065  287D               	goto	l904
   710  0066                     l56:	
   711                           ;main.c: 63: case 1: ADCON0 |= 0x04; break;
   712                           
   713  0066  151F               	bsf	31,2	;volatile
   714  0067  287D               	goto	l904
   715  0068                     l57:	
   716                           ;main.c: 64: case 2: ADCON0 |= 0x08; break;
   717                           
   718  0068  159F               	bsf	31,3	;volatile
   719  0069  287D               	goto	l904
   720  006A                     l894:	
   721                           ;main.c: 65: case 3: ADCON0 |= 0x0c; break;
   722                           
   723  006A  300C               	movlw	12
   724  006B  00F5               	movwf	??_GetADCValue
   725  006C  0875               	movf	??_GetADCValue,w
   726  006D  049F               	iorwf	31,f	;volatile
   727  006E  287D               	goto	l904
   728  006F                     l896:	
   729                           ;main.c: 67: default: return 0;
   730                           
   731  006F  01A2               	clrf	?_GetADCValue
   732  0070  01A3               	clrf	?_GetADCValue+1
   733  0071  0008               	return
   734  0072                     l902:	
   735                           ;main.c: 68: }
   736                           
   737  0072  0824               	movf	GetADCValue@Channel,w
   738                           
   739                           ; Switch size 1, requested type "space"
   740                           ; Number of cases is 4, Range of values is 0 to 3
   741                           ; switch strategies available:
   742                           ; Name         Instructions Cycles
   743                           ; direct_byte           10     6 (fixed)
   744                           ; simple_byte           13     7 (average)
   745                           ; jumptable            260     6 (fixed)
   746                           ;	Chosen strategy is direct_byte
   747  0073  0084               	movwf	4
   748  0074  3004               	movlw	4
   749  0075  0204               	subwf	4,w
   750  0076  1803               	skipnc
   751  0077  286F               	goto	l896
   752  0078  3001               	movlw	high S1010
   753  0079  008A               	movwf	10
   754  007A  301A               	movlw	low S1010
   755  007B  0704               	addwf	4,w
   756  007C  0082               	movwf	2
   757  007D                     l904:	
   758                           
   759                           ;main.c: 70: DELAY_us(10);
   760  007D  300A               	movlw	10
   761  007E  00A0               	movwf	DELAY_us@us_count
   762  007F  3000               	movlw	0
   763  0080  00A1               	movwf	DELAY_us@us_count+1
   764  0081  20FA               	fcall	_DELAY_us
   765                           
   766                           ;main.c: 72: GO_nDONE = 1;
   767  0082  1283               	bcf	3,5	;RP0=0, select bank0
   768  0083  149F               	bsf	31,1	;volatile
   769  0084                     l61:	
   770                           ;main.c: 74: while(GO_nDONE);
   771                           
   772  0084  189F               	btfsc	31,1	;volatile
   773  0085  2884               	goto	l61
   774                           
   775                           ;main.c: 76: return ((ADRESH<<8)+ADRESL);
   776  0086  081E               	movf	30,w	;volatile
   777  0087  00A3               	movwf	?_GetADCValue+1
   778  0088  1683               	bsf	3,5	;RP0=1, select bank1
   779  0089  081E               	movf	30,w	;volatile
   780  008A  1283               	bcf	3,5	;RP0=0, select bank0
   781  008B  00A2               	movwf	?_GetADCValue
   782  008C  0008               	return
   783  008D                     __end_of_GetADCValue:	
   784                           
   785                           	psect	swtext1
   786  011A                     __pswtext1:	
   787  011A                     S1010:	
   788  011A  2864               	ljmp	l892
   789  011B  2866               	ljmp	l56
   790  011C  2868               	ljmp	l57
   791  011D  286A               	ljmp	l894
   792                           
   793                           	psect	text6
   794  00D5                     __ptext6:	
   795 ;; *************** function _DELAY_ms *****************
   796 ;; Defined at:
   797 ;;		line 75 in file "delay.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  ms_count        2    6[BANK0 ] unsigned int 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1
   811 ;;      Params:         0       2       0
   812 ;;      Locals:         0       0       0
   813 ;;      Temps:          0       0       0
   814 ;;      Totals:         0       2       0
   815 ;;Total ram usage:        2 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    2
   818 ;; This function calls:
   819 ;;		_DELAY_us
   820 ;; This function is called by:
   821 ;;		_main
   822 ;;		_DELAY_sec
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _DELAY_ms
   828  00D5                     _DELAY_ms:	
   829  00D5                     l922:	
   830                           ;delay.c: 77: while (ms_count != 0)
   831                           
   832                           ;incstack = 0
   833                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
   834                           
   835  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   836  00D6  0826               	movf	DELAY_ms@ms_count,w
   837  00D7  0427               	iorwf	DELAY_ms@ms_count+1,w
   838  00D8  1903               	btfsc	3,2
   839  00D9  0008               	return
   840                           
   841                           ;delay.c: 78: {
   842                           ;delay.c: 79: DELAY_us(300u);
   843  00DA  302C               	movlw	44
   844  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   845  00DC  00A0               	movwf	DELAY_us@us_count
   846  00DD  3001               	movlw	1
   847  00DE  00A1               	movwf	DELAY_us@us_count+1
   848  00DF  20FA               	fcall	_DELAY_us
   849                           
   850                           ;delay.c: 80: ms_count--;
   851  00E0  3001               	movlw	1
   852  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   853  00E2  02A6               	subwf	DELAY_ms@ms_count,f
   854  00E3  3000               	movlw	0
   855  00E4  1C03               	skipc
   856  00E5  03A7               	decf	DELAY_ms@ms_count+1,f
   857  00E6  02A7               	subwf	DELAY_ms@ms_count+1,f
   858  00E7  28D5               	goto	l922
   859  00E8                     __end_of_DELAY_ms:	
   860                           
   861                           	psect	text7
   862  00FA                     __ptext7:	
   863 ;; *************** function _DELAY_us *****************
   864 ;; Defined at:
   865 ;;		line 56 in file "delay.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  us_count        2    0[BANK0 ] unsigned int 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, status,2, status,0
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMMON   BANK0   BANK1
   879 ;;      Params:         0       2       0
   880 ;;      Locals:         0       0       0
   881 ;;      Temps:          0       0       0
   882 ;;      Totals:         0       2       0
   883 ;;Total ram usage:        2 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_GetADCValue
   890 ;;		_DELAY_ms
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function _DELAY_us
   896  00FA                     _DELAY_us:	
   897  00FA                     l888:	
   898                           ;delay.c: 58: while (us_count != 0)
   899                           
   900                           ;incstack = 0
   901                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
   902                           
   903  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   904  00FB  0820               	movf	DELAY_us@us_count,w
   905  00FC  0421               	iorwf	DELAY_us@us_count+1,w
   906  00FD  1903               	btfsc	3,2
   907  00FE  0008               	return
   908                           
   909                           ;delay.c: 59: {
   910                           ;delay.c: 60: us_count--;
   911  00FF  3001               	movlw	1
   912  0100  1283               	bcf	3,5	;RP0=0, select bank0
   913  0101  02A0               	subwf	DELAY_us@us_count,f
   914  0102  3000               	movlw	0
   915  0103  1C03               	skipc
   916  0104  03A1               	decf	DELAY_us@us_count+1,f
   917  0105  02A1               	subwf	DELAY_us@us_count+1,f
   918  0106  28FA               	goto	l888
   919  0107                     __end_of_DELAY_us:	
   920                           
   921                           	psect	text8
   922  008D                     __ptext8:	
   923 ;; *************** function _ISR *****************
   924 ;; Defined at:
   925 ;;		line 79 in file "main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, status,2, status,0
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1
   939 ;;      Params:         0       0       0
   940 ;;      Locals:         0       0       0
   941 ;;      Temps:          5       0       0
   942 ;;      Totals:         5       0       0
   943 ;;Total ram usage:        5 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		Interrupt level 1
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           
   953                           ;psect for function _ISR
   954  008D                     _ISR:	
   955                           
   956                           ;main.c: 81: cycle++;
   957  008D  3001               	movlw	1
   958  008E  00F0               	movwf	??_ISR
   959  008F  0870               	movf	??_ISR,w
   960  0090  07F8               	addwf	_cycle,f
   961                           
   962                           ;main.c: 82: if(T0IF)
   963  0091  1D0B               	btfss	11,2	;volatile
   964  0092  28A8               	goto	i1l73
   965                           
   966                           ;main.c: 83: {
   967                           ;main.c: 84: if(GP0)
   968  0093  1C05               	btfss	5,0	;volatile
   969  0094  289D               	goto	i1l818
   970                           
   971                           ;main.c: 85: {
   972                           ;main.c: 86: TMR0 = PWM;
   973  0095  082D               	movf	_PWM,w
   974  0096  0081               	movwf	1	;volatile
   975                           
   976                           ;main.c: 87: if(cycle == 10)
   977  0097  300A               	movlw	10
   978  0098  0678               	xorwf	_cycle,w
   979  0099  1D03               	btfss	3,2
   980  009A  28A7               	goto	i1l824
   981                           
   982                           ;main.c: 88: {
   983                           ;main.c: 89: GP0 = 0;
   984  009B  1005               	bcf	5,0	;volatile
   985  009C  28A6               	goto	i1l822
   986  009D                     i1l818:	
   987                           ;main.c: 91: }
   988                           ;main.c: 92: }
   989                           
   990                           ;main.c: 90: cycle = 0;
   991                           
   992                           
   993                           ;main.c: 93: else
   994                           ;main.c: 94: {
   995                           ;main.c: 95: TMR0 = 255 - PWM;
   996  009D  032D               	decf	_PWM,w
   997  009E  3AFF               	xorlw	255
   998  009F  3EFF               	addlw	255
   999  00A0  0081               	movwf	1	;volatile
  1000                           
  1001                           ;main.c: 96: if(cycle == 10)
  1002  00A1  300A               	movlw	10
  1003  00A2  0678               	xorwf	_cycle,w
  1004  00A3  1D03               	btfss	3,2
  1005  00A4  28A7               	goto	i1l824
  1006                           
  1007                           ;main.c: 97: {
  1008                           ;main.c: 98: GP0 = 1;
  1009  00A5  1405               	bsf	5,0	;volatile
  1010  00A6                     i1l822:	
  1011                           
  1012                           ;main.c: 99: cycle = 0;
  1013  00A6  01F8               	clrf	_cycle
  1014  00A7                     i1l824:	
  1015                           
  1016                           ;main.c: 100: }
  1017                           ;main.c: 101: }
  1018                           ;main.c: 102: T0IF = 0;
  1019  00A7  110B               	bcf	11,2	;volatile
  1020  00A8                     i1l73:	
  1021  00A8  0874               	movf	??_ISR+4,w
  1022  00A9  00FF               	movwf	127
  1023  00AA  0873               	movf	??_ISR+3,w
  1024  00AB  008A               	movwf	10
  1025  00AC  0872               	movf	??_ISR+2,w
  1026  00AD  0084               	movwf	4
  1027  00AE  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1028  00AF  0083               	movwf	3
  1029  00B0  0EFE               	swapf	126,f
  1030  00B1  0E7E               	swapf	126,w
  1031  00B2  0009               	retfie
  1032  00B3                     __end_of_ISR:	
  1033  007E                     btemp	set	126	;btemp
  1034  007E                     wtemp0	set	126
  1035                           
  1036                           	psect	intentry
  1037  0004                     __pintentry:	
  1038                           ;incstack = 0
  1039                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1040                           
  1041  0004                     interrupt_function:	
  1042  007E                     saved_w	set	btemp
  1043  0004  00FE               	movwf	btemp
  1044  0005  0E03               	swapf	3,w
  1045  0006  00F1               	movwf	??_ISR+1
  1046  0007  0804               	movf	4,w
  1047  0008  00F2               	movwf	??_ISR+2
  1048  0009  080A               	movf	10,w
  1049  000A  00F3               	movwf	??_ISR+3
  1050  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1051  000C  087F               	movf	btemp+1,w
  1052  000D  00F4               	movwf	??_ISR+4
  1053  000E  288D               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80     11      14
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_GetADCValue
    _main->___bmul
    _main->_initPWM

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_DELAY_ms
    _GetADCValue->_DELAY_us
    _DELAY_ms->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1089
                                              8 BANK0      3     3      0
                           _DELAY_ms
                        _GetADCValue
                            _InitADC
                             ___bmul
                             ___wmul
                            _initPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     201
                                              5 COMMON     1     0      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GetADCValue                                          4     2      2     195
                                              5 COMMON     1     1      0
                                              2 BANK0      3     1      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _DELAY_ms                                             2     0      2     328
                                              6 BANK0      2     0      2
                           _DELAY_us
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DELAY_us                                             2     0      2     164
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
     ___wmul (ARG)
   _GetADCValue
     _DELAY_us
   _InitADC
   ___bmul
   ___wmul
   _initPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      B       E       4       17.5%
BANK1               20      0       0       5        0.0%
ABS                  0      0      17       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      17       8        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Oct 14 05:12:30 2017

                      pc 0002           ___bmul@product 0021              __CFG_CP$OFF 0000  
                     l61 0084                       l56 0066                       l57 0068  
                     l82 005C                       fsr 0004      ___wmul@multiplicand 0022  
                    _ADC 0076                      l188 00BE                      l902 0072  
                    l904 007D                      l922 00D5                      l940 00EB  
                    l926 00B6                      l944 00F1                      l892 0064  
                    _GP0 0028                      l894 006A                      _GP2 002A  
                    l888 00FA                      l896 006F                      l976 003A  
                    _GIE 005F             __CFG_CPD$OFF 0000                      _ISR 008D  
                    u375 00BF                      u385 00C6                      _PWM 002D  
                    fsr0 0004             __CFG_FOSC$XT 0000                     S1010 011A  
                   ?_ISR 0070                     _T0IE 005D                     _T0IF 005A  
                   _GPIO 0005                     i1l73 00A8                     _TMR0 0001  
                   _main 0015                     btemp 007E            __CFG_BOREN$ON 0000  
            _GetADCValue 005D                     start 000F         __end_of_DELAY_ms 00E8  
       __end_of_DELAY_us 0107        ___bmul@multiplier 0022          __end_of_InitADC 0112  
                  ??_ISR 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _CMCON 0019                    _ANSEL 009F                    i1l822 00A6  
                  i1l824 00A7                    i1l818 009D                    _VRCON 0099  
        __end_of_initPWM 011A                    _cycle 0078                    main@i 002A  
                  pclath 000A                    status 0003                    wtemp0 007E  
         __CFG_MCLRE$OFF 0000          __initialization 0010             __end_of_main 005D  
                 ??_main 0028                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E                   _TRISIO 0085                ??_InitADC 0075  
         __CFG_PWRTE$OFF 0000                   ___bmul 00E8                   ___wmul 00B3  
       DELAY_ms@ms_count 0026                ??_initPWM 0075                   saved_w 007E  
              ?_DELAY_ms 0026                ?_DELAY_us 0020  __end_of__initialization 0013  
    ___bmul@multiplicand 0075           __pcstackCOMMON 0070               ??_DELAY_ms 0075  
             ??_DELAY_us 0075             ?_GetADCValue 0022               __pmaintext 0015  
                ?___bmul 0075                  ?___wmul 0020               __pintentry 0004  
       DELAY_us@us_count 0020                  _InitADC 0107          __size_of___bmul 0012  
        __size_of___wmul 0022                  __ptext1 0112                  __ptext2 00B3  
                __ptext3 00E8                  __ptext4 0107                  __ptext5 005D  
                __ptext6 00D5                  __ptext7 00FA                  __ptext8 008D  
           __size_of_ISR 0026                  _initPWM 0112     end_of_initialization 0013  
      __size_of_DELAY_ms 0013        __size_of_DELAY_us 000D     __size_of_GetADCValue 0030  
         __end_of___bmul 00FA           __end_of___wmul 00D5       GetADCValue@Channel 0024  
    start_initialization 0010              __end_of_ISR 00B3                 ??___bmul 0020  
               ??___wmul 0075                _StartTime 002B              __pbssCOMMON 0076  
              ___latbits 0000            __pcstackBANK0 0020                 ?_InitADC 0070  
              __pnvBANK0 002B                __pswtext1 011A                 ?_initPWM 0070  
               _DELAY_ms 00D5                 _DELAY_us 00FA        interrupt_function 0004  
         ___wmul@product 0024                 _GO_nDONE 00F9        ___wmul@multiplier 0020  
       __size_of_InitADC 000B         __size_of_initPWM 0008            __size_of_main 0048  
          ??_GetADCValue 0075                 intlevel1 0000      __end_of_GetADCValue 008D  
             _OPTION_REG 0081           InitADC@Channel 0070  
