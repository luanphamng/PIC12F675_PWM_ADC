

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Oct 14 07:38:36 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.43
    22                           ; Generated 25/07/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC12F683 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0019                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  008C                     	;# 
    74  008E                     	;# 
    75  0090                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0096                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87                           
    88                           	psect	nvBANK0
    89  0027                     __pnvBANK0:	
    90  0027                     _PWM:	
    91  0027                     	ds	1
    92  0005                     _GPIO	set	5
    93  0001                     _TMR0	set	1
    94  001E                     _ADRESH	set	30
    95  0019                     _CMCON	set	25
    96  001F                     _ADCON0	set	31
    97  002A                     _GP2	set	42
    98  0028                     _GP0	set	40
    99  005A                     _T0IF	set	90
   100  00F9                     _GO_nDONE	set	249
   101  005F                     _GIE	set	95
   102  005D                     _T0IE	set	93
   103  009E                     _ADRESL	set	158
   104  0099                     _VRCON	set	153
   105  0085                     _TRISIO	set	133
   106  009F                     _ANSEL	set	159
   107  0081                     _OPTION_REG	set	129
   108                           
   109                           ; #config settings
   110  0000                     
   111                           	psect	cinit
   112  0010                     start_initialization:	
   113  0010                     __initialization:	
   114                           
   115                           ; Clear objects allocated to COMMON
   116  0010  01F0               	clrf	__pbssCOMMON& (0+127)
   117  0011  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   118  0012  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   119  0013  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   120  0014  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   121  0015                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  0015                     __end_of__initialization:	
   125  0015  0183               	clrf	3
   126  0016  2817               	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0070                     __pbssCOMMON:	
   130  0070                     _StartTime:	
   131  0070                     	ds	2
   132  0072                     _ADC:	
   133  0072                     	ds	2
   134  0074                     _cycle:	
   135  0074                     	ds	1
   136                           
   137                           	psect	cstackCOMMON
   138  0075                     __pcstackCOMMON:	
   139  0075                     ?_initPWM:	
   140  0075                     ?_InitADC:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0075                     ?_ISR:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0075                     ??_ISR:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0075                     ?_main:	
   150                           ; 1 bytes @ 0x0
   151                           
   152  0075                     InitADC@Channel:	
   153                           ; 1 bytes @ 0x0
   154                           
   155                           
   156                           ; 1 bytes @ 0x0
   157  0075                     	ds	5
   158                           
   159                           	psect	cstackBANK0
   160  0020                     __pcstackBANK0:	
   161  0020                     ?_DELAY_us:	
   162  0020                     ??_initPWM:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0020                     ??_InitADC:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0020                     DELAY_us@us_count:	
   169                           ; 1 bytes @ 0x0
   170                           
   171                           
   172                           ; 2 bytes @ 0x0
   173  0020                     	ds	2
   174  0022                     ??_DELAY_us:	
   175  0022                     ?_DELAY_ms:	
   176                           ; 1 bytes @ 0x2
   177                           
   178  0022                     ?_GetADCValue:	
   179                           ; 1 bytes @ 0x2
   180                           
   181  0022                     DELAY_ms@ms_count:	
   182                           ; 2 bytes @ 0x2
   183                           
   184                           
   185                           ; 2 bytes @ 0x2
   186  0022                     	ds	2
   187  0024                     ??_DELAY_ms:	
   188  0024                     ?_DELAY_sec:	
   189                           ; 1 bytes @ 0x4
   190                           
   191  0024                     ??_GetADCValue:	
   192                           ; 1 bytes @ 0x4
   193                           
   194  0024                     DELAY_sec@sec_count:	
   195                           ; 1 bytes @ 0x4
   196                           
   197                           
   198                           ; 2 bytes @ 0x4
   199  0024                     	ds	1
   200  0025                     GetADCValue@Channel:	
   201                           
   202                           ; 1 bytes @ 0x5
   203  0025                     	ds	1
   204  0026                     ??_DELAY_sec:	
   205  0026                     ??_main:	
   206                           ; 1 bytes @ 0x6
   207                           
   208                           
   209                           ; 1 bytes @ 0x6
   210  0026                     	ds	1
   211                           
   212                           	psect	maintext
   213  0017                     __pmaintext:	
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 110 in file "main.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  i               1    0        unsigned char 
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMMON   BANK0   BANK1
   233 ;;      Params:         0       0       0
   234 ;;      Locals:         0       0       0
   235 ;;      Temps:          0       1       0
   236 ;;      Totals:         0       1       0
   237 ;;Total ram usage:        1 bytes
   238 ;; Hardware stack levels required when called:    4
   239 ;; This function calls:
   240 ;;		_DELAY_ms
   241 ;;		_DELAY_sec
   242 ;;		_GetADCValue
   243 ;;		_InitADC
   244 ;;		_initPWM
   245 ;; This function is called by:
   246 ;;		Startup code after reset
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           
   251                           ;psect for function _main
   252  0017                     _main:	
   253                           
   254                           ;main.c: 112: ANSEL = 0x00;
   255                           
   256                           ;incstack = 0
   257                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   258  0017  1683               	bsf	3,5	;RP0=1, select bank1
   259  0018  019F               	clrf	31	;volatile
   260                           
   261                           ;main.c: 113: ADCON0 = 0x00;
   262  0019  1283               	bcf	3,5	;RP0=0, select bank0
   263  001A  019F               	clrf	31	;volatile
   264                           
   265                           ;main.c: 114: CMCON = 0x07;
   266  001B  3007               	movlw	7
   267  001C  0099               	movwf	25	;volatile
   268                           
   269                           ;main.c: 115: VRCON = 0x00;
   270  001D  1683               	bsf	3,5	;RP0=1, select bank1
   271  001E  0199               	clrf	25	;volatile
   272                           
   273                           ;main.c: 116: TRISIO = 0x08;
   274  001F  3008               	movlw	8
   275  0020  0085               	movwf	5	;volatile
   276                           
   277                           ;main.c: 117: GPIO = 0x00;
   278  0021  1283               	bcf	3,5	;RP0=0, select bank0
   279  0022  0185               	clrf	5	;volatile
   280                           
   281                           ;main.c: 119: initPWM();
   282  0023  20E0               	fcall	_initPWM
   283                           
   284                           ;main.c: 120: GP2 = 1;
   285  0024  1283               	bcf	3,5	;RP0=0, select bank0
   286  0025  1505               	bsf	5,2	;volatile
   287                           
   288                           ;main.c: 122: InitADC(1);
   289  0026  3001               	movlw	1
   290  0027  20D5               	fcall	_InitADC
   291                           
   292                           ;main.c: 125: unsigned char i;
   293                           ;main.c: 128: PWM = 127;
   294  0028  307F               	movlw	127
   295  0029  1283               	bcf	3,5	;RP0=0, select bank0
   296  002A  00A6               	movwf	??_main
   297  002B  0826               	movf	??_main,w
   298  002C  00A7               	movwf	_PWM
   299                           
   300                           ;main.c: 129: DELAY_ms(20);
   301  002D  3014               	movlw	20
   302  002E  00A2               	movwf	DELAY_ms@ms_count
   303  002F  3000               	movlw	0
   304  0030  00A3               	movwf	DELAY_ms@ms_count+1
   305  0031  20B5               	fcall	_DELAY_ms
   306                           
   307                           ;main.c: 131: {
   308                           ;main.c: 132: StartTime = GetADCValue(1);
   309                           
   310                           ;main.c: 130: while(1)
   311  0032  3001               	movlw	1
   312  0033  204D               	fcall	_GetADCValue
   313  0034  1283               	bcf	3,5	;RP0=0, select bank0
   314  0035  0823               	movf	?_GetADCValue+1,w
   315  0036  00F1               	movwf	_StartTime+1
   316  0037  0822               	movf	?_GetADCValue,w
   317  0038  00F0               	movwf	_StartTime
   318                           
   319                           ;main.c: 138: {
   320                           ;main.c: 140: }
   321                           ;main.c: 161: PWM = 5;
   322  0039  3005               	movlw	5
   323  003A  00A6               	movwf	??_main
   324  003B  0826               	movf	??_main,w
   325  003C  00A7               	movwf	_PWM
   326                           
   327                           ;main.c: 162: DELAY_sec(5);
   328  003D  3005               	movlw	5
   329  003E  00A4               	movwf	DELAY_sec@sec_count
   330  003F  3000               	movlw	0
   331  0040  00A5               	movwf	DELAY_sec@sec_count+1
   332  0041  20A2               	fcall	_DELAY_sec
   333                           
   334                           ;main.c: 164: PWM = 250;
   335  0042  30FA               	movlw	250
   336  0043  1283               	bcf	3,5	;RP0=0, select bank0
   337  0044  00A6               	movwf	??_main
   338  0045  0826               	movf	??_main,w
   339  0046  00A7               	movwf	_PWM
   340                           
   341                           ;main.c: 165: DELAY_sec(5);
   342  0047  3005               	movlw	5
   343  0048  00A4               	movwf	DELAY_sec@sec_count
   344  0049  3000               	movlw	0
   345  004A  00A5               	movwf	DELAY_sec@sec_count+1
   346  004B  20A2               	fcall	_DELAY_sec
   347  004C                     l81:	
   348                           ;main.c: 167: while(1);
   349                           
   350  004C  284C               	goto	l81
   351  004D                     __end_of_main:	
   352                           
   353                           	psect	text1
   354  00E0                     __ptext1:	
   355 ;; *************** function _initPWM *****************
   356 ;; Defined at:
   357 ;;		line 31 in file "main.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;		None
   360 ;; Auto vars:     Size  Location     Type
   361 ;;		None
   362 ;; Return value:  Size  Location     Type
   363 ;;                  1    wreg      void 
   364 ;; Registers used:
   365 ;;		wreg, status,2, status,0
   366 ;; Tracked objects:
   367 ;;		On entry : 0/0
   368 ;;		On exit  : 0/0
   369 ;;		Unchanged: 0/0
   370 ;; Data sizes:     COMMON   BANK0   BANK1
   371 ;;      Params:         0       0       0
   372 ;;      Locals:         0       0       0
   373 ;;      Temps:          0       1       0
   374 ;;      Totals:         0       1       0
   375 ;;Total ram usage:        1 bytes
   376 ;; Hardware stack levels used:    1
   377 ;; Hardware stack levels required when called:    1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           
   386                           ;psect for function _initPWM
   387  00E0                     _initPWM:	
   388                           
   389                           ;main.c: 33: OPTION_REG &= 0xC0;
   390                           
   391                           ;incstack = 0
   392                           ; Regs used in _initPWM: [wreg+status,2+status,0]
   393  00E0  30C0               	movlw	192
   394  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   395  00E2  00A0               	movwf	??_initPWM
   396  00E3  0820               	movf	??_initPWM,w
   397  00E4  1683               	bsf	3,5	;RP0=1, select bank1
   398  00E5  0581               	andwf	1,f	;volatile
   399                           
   400                           ;main.c: 35: T0IE = 1;
   401  00E6  168B               	bsf	11,5	;volatile
   402                           
   403                           ;main.c: 36: GIE = 1;
   404  00E7  178B               	bsf	11,7	;volatile
   405  00E8  0008               	return
   406  00E9                     __end_of_initPWM:	
   407                           
   408                           	psect	text2
   409  00D5                     __ptext2:	
   410 ;; *************** function _InitADC *****************
   411 ;; Defined at:
   412 ;;		line 39 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;  Channel         1    wreg     unsigned char 
   415 ;; Auto vars:     Size  Location     Type
   416 ;;  Channel         1    0[COMMON] unsigned char 
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1
   426 ;;      Params:         0       0       0
   427 ;;      Locals:         0       0       0
   428 ;;      Temps:          0       0       0
   429 ;;      Totals:         0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    1
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _InitADC
   442  00D5                     _InitADC:	
   443                           
   444                           ;main.c: 41: ANSEL |= 0x02;
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _InitADC: [wreg+status,2]
   448  00D5  1683               	bsf	3,5	;RP0=1, select bank1
   449  00D6  149F               	bsf	31,1	;volatile
   450                           
   451                           ;main.c: 42: TRISIO |= 0x02;
   452  00D7  1485               	bsf	5,1	;volatile
   453                           
   454                           ;main.c: 43: ADCON0 = 0x81;
   455  00D8  3081               	movlw	129
   456  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   457  00DA  009F               	movwf	31	;volatile
   458                           
   459                           ;main.c: 44: CMCON = 0x07;
   460  00DB  3007               	movlw	7
   461  00DC  0099               	movwf	25	;volatile
   462                           
   463                           ;main.c: 45: VRCON = 0x00;
   464  00DD  1683               	bsf	3,5	;RP0=1, select bank1
   465  00DE  0199               	clrf	25	;volatile
   466  00DF  0008               	return
   467  00E0                     __end_of_InitADC:	
   468                           
   469                           	psect	text3
   470  004D                     __ptext3:	
   471 ;; *************** function _GetADCValue *****************
   472 ;; Defined at:
   473 ;;		line 57 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;  Channel         1    wreg     unsigned char 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  Channel         1    5[BANK0 ] unsigned char 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  2    2[BANK0 ] unsigned int 
   480 ;; Registers used:
   481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMMON   BANK0   BANK1
   487 ;;      Params:         0       2       0
   488 ;;      Locals:         0       1       0
   489 ;;      Temps:          0       1       0
   490 ;;      Totals:         0       4       0
   491 ;;Total ram usage:        4 bytes
   492 ;; Hardware stack levels used:    1
   493 ;; Hardware stack levels required when called:    2
   494 ;; This function calls:
   495 ;;		_DELAY_us
   496 ;; This function is called by:
   497 ;;		_main
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           
   502                           ;psect for function _GetADCValue
   503  004D                     _GetADCValue:	
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _GetADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   507                           ;GetADCValue@Channel stored from wreg
   508  004D  1283               	bcf	3,5	;RP0=0, select bank0
   509  004E  00A5               	movwf	GetADCValue@Channel
   510                           
   511                           ;main.c: 59: ADCON0 &= 0xf3;
   512  004F  30F3               	movlw	243
   513  0050  00A4               	movwf	??_GetADCValue
   514  0051  0824               	movf	??_GetADCValue,w
   515  0052  059F               	andwf	31,f	;volatile
   516                           
   517                           ;main.c: 61: switch(Channel)
   518  0053  2862               	goto	l862
   519  0054                     l852:	
   520                           ;main.c: 62: {
   521                           ;main.c: 63: case 0: ADCON0 |= 0x00; break;
   522                           
   523  0054  081F               	movf	31,w	;volatile
   524  0055  286D               	goto	l864
   525  0056                     l58:	
   526                           ;main.c: 64: case 1: ADCON0 |= 0x04; break;
   527                           
   528  0056  151F               	bsf	31,2	;volatile
   529  0057  286D               	goto	l864
   530  0058                     l59:	
   531                           ;main.c: 65: case 2: ADCON0 |= 0x08; break;
   532                           
   533  0058  159F               	bsf	31,3	;volatile
   534  0059  286D               	goto	l864
   535  005A                     l854:	
   536                           ;main.c: 66: case 3: ADCON0 |= 0x0c; break;
   537                           
   538  005A  300C               	movlw	12
   539  005B  00A4               	movwf	??_GetADCValue
   540  005C  0824               	movf	??_GetADCValue,w
   541  005D  049F               	iorwf	31,f	;volatile
   542  005E  286D               	goto	l864
   543  005F                     l856:	
   544                           ;main.c: 68: default: return 0;
   545                           
   546  005F  01A2               	clrf	?_GetADCValue
   547  0060  01A3               	clrf	?_GetADCValue+1
   548  0061  0008               	return
   549  0062                     l862:	
   550                           ;main.c: 69: }
   551                           
   552  0062  0825               	movf	GetADCValue@Channel,w
   553                           
   554                           ; Switch size 1, requested type "space"
   555                           ; Number of cases is 4, Range of values is 0 to 3
   556                           ; switch strategies available:
   557                           ; Name         Instructions Cycles
   558                           ; direct_byte           10     6 (fixed)
   559                           ; simple_byte           13     7 (average)
   560                           ; jumptable            260     6 (fixed)
   561                           ;	Chosen strategy is direct_byte
   562  0063  0084               	movwf	4
   563  0064  3004               	movlw	4
   564  0065  0204               	subwf	4,w
   565  0066  1803               	skipnc
   566  0067  285F               	goto	l856
   567  0068  3000               	movlw	high S932
   568  0069  008A               	movwf	10
   569  006A  30E9               	movlw	low S932
   570  006B  0704               	addwf	4,w
   571  006C  0082               	movwf	2
   572  006D                     l864:	
   573                           
   574                           ;main.c: 71: DELAY_us(10);
   575  006D  300A               	movlw	10
   576  006E  00A0               	movwf	DELAY_us@us_count
   577  006F  3000               	movlw	0
   578  0070  00A1               	movwf	DELAY_us@us_count+1
   579  0071  20C8               	fcall	_DELAY_us
   580                           
   581                           ;main.c: 73: GO_nDONE = 1;
   582  0072  1283               	bcf	3,5	;RP0=0, select bank0
   583  0073  149F               	bsf	31,1	;volatile
   584  0074                     l63:	
   585                           ;main.c: 75: while(GO_nDONE);
   586                           
   587  0074  189F               	btfsc	31,1	;volatile
   588  0075  2874               	goto	l63
   589                           
   590                           ;main.c: 77: return ((ADRESH<<8)+ADRESL);
   591  0076  081E               	movf	30,w	;volatile
   592  0077  00A3               	movwf	?_GetADCValue+1
   593  0078  1683               	bsf	3,5	;RP0=1, select bank1
   594  0079  081E               	movf	30,w	;volatile
   595  007A  1283               	bcf	3,5	;RP0=0, select bank0
   596  007B  00A2               	movwf	?_GetADCValue
   597  007C  0008               	return
   598  007D                     __end_of_GetADCValue:	
   599                           
   600                           	psect	swtext1
   601  00E9                     __pswtext1:	
   602  00E9                     S932:	
   603  00E9  2854               	ljmp	l852
   604  00EA  2856               	ljmp	l58
   605  00EB  2858               	ljmp	l59
   606  00EC  285A               	ljmp	l854
   607                           
   608                           	psect	text4
   609  00A2                     __ptext4:	
   610 ;; *************** function _DELAY_sec *****************
   611 ;; Defined at:
   612 ;;		line 102 in file "delay.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  sec_count       2    4[BANK0 ] unsigned int 
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, status,2, status,0, pclath, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMMON   BANK0   BANK1
   626 ;;      Params:         0       2       0
   627 ;;      Locals:         0       0       0
   628 ;;      Temps:          0       0       0
   629 ;;      Totals:         0       2       0
   630 ;;Total ram usage:        2 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    3
   633 ;; This function calls:
   634 ;;		_DELAY_ms
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           
   641                           ;psect for function _DELAY_sec
   642  00A2                     _DELAY_sec:	
   643  00A2                     l882:	
   644                           ;delay.c: 104: while (sec_count != 0) {
   645                           
   646                           ;incstack = 0
   647                           ; Regs used in _DELAY_sec: [wreg+status,2+status,0+pclath+cstack]
   648                           
   649  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   650  00A3  0824               	movf	DELAY_sec@sec_count,w
   651  00A4  0425               	iorwf	DELAY_sec@sec_count+1,w
   652  00A5  1903               	btfsc	3,2
   653  00A6  0008               	return
   654                           
   655                           ;delay.c: 105: DELAY_ms(1000);
   656  00A7  30E8               	movlw	232
   657  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   658  00A9  00A2               	movwf	DELAY_ms@ms_count
   659  00AA  3003               	movlw	3
   660  00AB  00A3               	movwf	DELAY_ms@ms_count+1
   661  00AC  20B5               	fcall	_DELAY_ms
   662                           
   663                           ;delay.c: 106: sec_count--;
   664  00AD  3001               	movlw	1
   665  00AE  1283               	bcf	3,5	;RP0=0, select bank0
   666  00AF  02A4               	subwf	DELAY_sec@sec_count,f
   667  00B0  3000               	movlw	0
   668  00B1  1C03               	skipc
   669  00B2  03A5               	decf	DELAY_sec@sec_count+1,f
   670  00B3  02A5               	subwf	DELAY_sec@sec_count+1,f
   671  00B4  28A2               	goto	l882
   672  00B5                     __end_of_DELAY_sec:	
   673                           
   674                           	psect	text5
   675  00B5                     __ptext5:	
   676 ;; *************** function _DELAY_ms *****************
   677 ;; Defined at:
   678 ;;		line 75 in file "delay.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;  ms_count        2    2[BANK0 ] unsigned int 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;		None
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, status,2, status,0, pclath, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1
   692 ;;      Params:         0       2       0
   693 ;;      Locals:         0       0       0
   694 ;;      Temps:          0       0       0
   695 ;;      Totals:         0       2       0
   696 ;;Total ram usage:        2 bytes
   697 ;; Hardware stack levels used:    1
   698 ;; Hardware stack levels required when called:    2
   699 ;; This function calls:
   700 ;;		_DELAY_us
   701 ;; This function is called by:
   702 ;;		_main
   703 ;;		_DELAY_sec
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _DELAY_ms
   709  00B5                     _DELAY_ms:	
   710  00B5                     l836:	
   711                           ;delay.c: 77: while (ms_count != 0)
   712                           
   713                           ;incstack = 0
   714                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
   715                           
   716  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   717  00B6  0822               	movf	DELAY_ms@ms_count,w
   718  00B7  0423               	iorwf	DELAY_ms@ms_count+1,w
   719  00B8  1903               	btfsc	3,2
   720  00B9  0008               	return
   721                           
   722                           ;delay.c: 78: {
   723                           ;delay.c: 79: DELAY_us(125);
   724  00BA  307D               	movlw	125
   725  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   726  00BC  00A0               	movwf	DELAY_us@us_count
   727  00BD  3000               	movlw	0
   728  00BE  00A1               	movwf	DELAY_us@us_count+1
   729  00BF  20C8               	fcall	_DELAY_us
   730                           
   731                           ;delay.c: 80: ms_count--;
   732  00C0  3001               	movlw	1
   733  00C1  1283               	bcf	3,5	;RP0=0, select bank0
   734  00C2  02A2               	subwf	DELAY_ms@ms_count,f
   735  00C3  3000               	movlw	0
   736  00C4  1C03               	skipc
   737  00C5  03A3               	decf	DELAY_ms@ms_count+1,f
   738  00C6  02A3               	subwf	DELAY_ms@ms_count+1,f
   739  00C7  28B5               	goto	l836
   740  00C8                     __end_of_DELAY_ms:	
   741                           
   742                           	psect	text6
   743  00C8                     __ptext6:	
   744 ;; *************** function _DELAY_us *****************
   745 ;; Defined at:
   746 ;;		line 56 in file "delay.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  us_count        2    0[BANK0 ] unsigned int 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1
   760 ;;      Params:         0       2       0
   761 ;;      Locals:         0       0       0
   762 ;;      Temps:          0       0       0
   763 ;;      Totals:         0       2       0
   764 ;;Total ram usage:        2 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    1
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_GetADCValue
   771 ;;		_DELAY_ms
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _DELAY_us
   777  00C8                     _DELAY_us:	
   778  00C8                     l828:	
   779                           ;delay.c: 58: while (us_count != 0)
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
   783                           
   784  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   785  00C9  0820               	movf	DELAY_us@us_count,w
   786  00CA  0421               	iorwf	DELAY_us@us_count+1,w
   787  00CB  1903               	btfsc	3,2
   788  00CC  0008               	return
   789                           
   790                           ;delay.c: 59: {
   791                           ;delay.c: 60: us_count--;
   792  00CD  3001               	movlw	1
   793  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   794  00CF  02A0               	subwf	DELAY_us@us_count,f
   795  00D0  3000               	movlw	0
   796  00D1  1C03               	skipc
   797  00D2  03A1               	decf	DELAY_us@us_count+1,f
   798  00D3  02A1               	subwf	DELAY_us@us_count+1,f
   799  00D4  28C8               	goto	l828
   800  00D5                     __end_of_DELAY_us:	
   801                           
   802                           	psect	text7
   803  007D                     __ptext7:	
   804 ;; *************** function _ISR *****************
   805 ;; Defined at:
   806 ;;		line 80 in file "main.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1
   820 ;;      Params:         0       0       0
   821 ;;      Locals:         0       0       0
   822 ;;      Temps:          5       0       0
   823 ;;      Totals:         5       0       0
   824 ;;Total ram usage:        5 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		Interrupt level 1
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           
   834                           ;psect for function _ISR
   835  007D                     _ISR:	
   836                           
   837                           ;main.c: 82: cycle++;
   838  007D  3001               	movlw	1
   839  007E  00F5               	movwf	??_ISR
   840  007F  0875               	movf	??_ISR,w
   841  0080  07F4               	addwf	_cycle,f
   842                           
   843                           ;main.c: 83: if(T0IF)
   844  0081  1D0B               	btfss	11,2	;volatile
   845  0082  2897               	goto	i1l75
   846                           
   847                           ;main.c: 84: {
   848                           ;main.c: 85: if(GP0)
   849  0083  1C05               	btfss	5,0	;volatile
   850  0084  288E               	goto	i1l766
   851                           
   852                           ;main.c: 86: {
   853                           ;main.c: 87: TMR0 = 255 - PWM;
   854  0085  0327               	decf	_PWM,w
   855  0086  3AFF               	xorlw	255
   856  0087  3EFF               	addlw	255
   857  0088  0081               	movwf	1	;volatile
   858                           
   859                           ;main.c: 88: if(cycle == 1)
   860  0089  0374               	decf	_cycle,w
   861  008A  1D03               	btfss	3,2
   862  008B  2896               	goto	i1l774
   863                           
   864                           ;main.c: 89: {
   865                           ;main.c: 90: GP0 = 0;
   866  008C  1005               	bcf	5,0	;volatile
   867  008D  2895               	goto	i1l772
   868  008E                     i1l766:	
   869                           ;main.c: 92: }
   870                           ;main.c: 93: }
   871                           
   872                           ;main.c: 91: cycle = 0;
   873                           
   874                           
   875                           ;main.c: 94: else
   876                           ;main.c: 95: {
   877                           ;main.c: 96: TMR0 = PWM;
   878  008E  0827               	movf	_PWM,w
   879  008F  0081               	movwf	1	;volatile
   880                           
   881                           ;main.c: 97: if(cycle == 5)
   882  0090  3005               	movlw	5
   883  0091  0674               	xorwf	_cycle,w
   884  0092  1D03               	btfss	3,2
   885  0093  2896               	goto	i1l774
   886                           
   887                           ;main.c: 98: {
   888                           ;main.c: 99: GP0 = 1;
   889  0094  1405               	bsf	5,0	;volatile
   890  0095                     i1l772:	
   891                           
   892                           ;main.c: 100: cycle = 0;
   893  0095  01F4               	clrf	_cycle
   894  0096                     i1l774:	
   895                           
   896                           ;main.c: 101: }
   897                           ;main.c: 102: }
   898                           ;main.c: 103: T0IF = 0;
   899  0096  110B               	bcf	11,2	;volatile
   900  0097                     i1l75:	
   901  0097  0879               	movf	??_ISR+4,w
   902  0098  00FF               	movwf	127
   903  0099  0878               	movf	??_ISR+3,w
   904  009A  008A               	movwf	10
   905  009B  0877               	movf	??_ISR+2,w
   906  009C  0084               	movwf	4
   907  009D  0E76               	swapf	(??_ISR+1)^(0+-128),w
   908  009E  0083               	movwf	3
   909  009F  0EFE               	swapf	126,f
   910  00A0  0E7E               	swapf	126,w
   911  00A1  0009               	retfie
   912  00A2                     __end_of_ISR:	
   913  007E                     btemp	set	126	;btemp
   914  007E                     wtemp0	set	126
   915                           
   916                           	psect	intentry
   917  0004                     __pintentry:	
   918                           ;incstack = 0
   919                           ; Regs used in _ISR: [wreg+status,2+status,0]
   920                           
   921  0004                     interrupt_function:	
   922  007E                     saved_w	set	btemp
   923  0004  00FE               	movwf	btemp
   924  0005  0E03               	swapf	3,w
   925  0006  00F6               	movwf	??_ISR+1
   926  0007  0804               	movf	4,w
   927  0008  00F7               	movwf	??_ISR+2
   928  0009  080A               	movf	10,w
   929  000A  00F8               	movwf	??_ISR+3
   930  000B  1283               	bcf	3,5	;RP0=0, select bank0
   931  000C  087F               	movf	btemp+1,w
   932  000D  00F9               	movwf	??_ISR+4
   933  000E  287D               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      7       8
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_DELAY_sec
    _main->_GetADCValue
    _GetADCValue->_DELAY_us
    _DELAY_sec->_DELAY_ms
    _DELAY_ms->_DELAY_us

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1015
                                              6 BANK0      1     1      0
                           _DELAY_ms
                          _DELAY_sec
                        _GetADCValue
                            _InitADC
                            _initPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GetADCValue                                          4     2      2     195
                                              2 BANK0      4     2      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _DELAY_sec                                            2     0      2     492
                                              4 BANK0      2     0      2
                           _DELAY_ms
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2     328
                                              2 BANK0      2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _DELAY_us                                             2     0      2     164
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _DELAY_sec
     _DELAY_ms
       _DELAY_us
   _GetADCValue
     _DELAY_us
   _InitADC
   _initPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7       8       4       10.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      12       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      12       8        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Oct 14 07:38:36 2017

                      pc 0002              __CFG_CP$OFF 0000                       l63 0074  
                     l81 004C                       l58 0056                       l59 0058  
                     fsr 0004                      S932 00E9       __size_of_DELAY_sec 0013  
                    _ADC 0072                      l828 00C8                      l836 00B5  
                    l852 0054                      l854 005A                      l862 0062  
                    l856 005F                      l864 006D                      l882 00A2  
                    _GP0 0028                      _GP2 002A                      _GIE 005F  
           __CFG_CPD$OFF 0000                      _ISR 007D                      _PWM 0027  
                    fsr0 0004       DELAY_sec@sec_count 0024             __CFG_FOSC$XT 0000  
                   ?_ISR 0075                     _T0IE 005D                     _T0IF 005A  
                   _GPIO 0005                     i1l75 0097                     _TMR0 0001  
                   _main 0017                     btemp 007E            __CFG_BOREN$ON 0000  
            _GetADCValue 004D                     start 000F         __end_of_DELAY_ms 00C8  
       __end_of_DELAY_us 00D5          __end_of_InitADC 00E0                    ??_ISR 0075  
                  ?_main 0075            __CFG_WDTE$OFF 0000                    _CMCON 0019  
                  _ANSEL 009F                    i1l772 0095                    i1l774 0096  
                  i1l766 008E                    _VRCON 0099          __end_of_initPWM 00E9  
                  _cycle 0074                    pclath 000A                    status 0003  
                  wtemp0 007E        __end_of_DELAY_sec 00B5           __CFG_MCLRE$OFF 0000  
        __initialization 0010             __end_of_main 004D                   ??_main 0026  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
                 _TRISIO 0085                ??_InitADC 0020           __CFG_PWRTE$OFF 0000  
       DELAY_ms@ms_count 0022                ??_initPWM 0020                   saved_w 007E  
              ?_DELAY_ms 0022                ?_DELAY_us 0020  __end_of__initialization 0015  
         __pcstackCOMMON 0075               ??_DELAY_ms 0024               ??_DELAY_us 0022  
           ?_GetADCValue 0022               __pmaintext 0017               __pintentry 0004  
       DELAY_us@us_count 0020                  _InitADC 00D5                _DELAY_sec 00A2  
                __ptext1 00E0                  __ptext2 00D5                  __ptext3 004D  
                __ptext4 00A2                  __ptext5 00B5                  __ptext6 00C8  
                __ptext7 007D             __size_of_ISR 0025                  _initPWM 00E0  
   end_of_initialization 0015               ?_DELAY_sec 0024        __size_of_DELAY_ms 0013  
      __size_of_DELAY_us 000D     __size_of_GetADCValue 0030       GetADCValue@Channel 0025  
    start_initialization 0010              __end_of_ISR 00A2              ??_DELAY_sec 0026  
              _StartTime 0070              __pbssCOMMON 0070                ___latbits 0000  
          __pcstackBANK0 0020                 ?_InitADC 0075                __pnvBANK0 0027  
              __pswtext1 00E9                 ?_initPWM 0075                 _DELAY_ms 00B5  
               _DELAY_us 00C8        interrupt_function 0004                 _GO_nDONE 00F9  
       __size_of_InitADC 000B         __size_of_initPWM 0009            __size_of_main 0036  
          ??_GetADCValue 0024                 intlevel1 0000      __end_of_GetADCValue 007D  
             _OPTION_REG 0081           InitADC@Channel 0075  
