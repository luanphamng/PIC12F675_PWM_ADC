

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Oct 14 11:13:13 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC12F683 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0019                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0090                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0096                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88  0005                     _GPIO	set	5
    89  0001                     _TMR0	set	1
    90  001E                     _ADRESH	set	30
    91  0019                     _CMCON	set	25
    92  001F                     _ADCON0	set	31
    93  002A                     _GP2	set	42
    94  0028                     _GP0	set	40
    95  005A                     _T0IF	set	90
    96  00F9                     _GO_nDONE	set	249
    97  005F                     _GIE	set	95
    98  005D                     _T0IE	set	93
    99  009E                     _ADRESL	set	158
   100  0099                     _VRCON	set	153
   101  0085                     _TRISIO	set	133
   102  009F                     _ANSEL	set	159
   103  0081                     _OPTION_REG	set	129
   104                           
   105                           ; #config settings
   106  0000                     
   107                           	psect	cinit
   108  0010                     start_initialization:	
   109  0010                     __initialization:	
   110                           
   111                           ; Clear objects allocated to COMMON
   112  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   113  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   114  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   115                           
   116                           ; Clear objects allocated to BANK0
   117  0013  1283               	bcf	3,5	;RP0=0, select bank0
   118  0014  01AB               	clrf	__pbssBANK0& (0+127)
   119  0015  01AC               	clrf	(__pbssBANK0+1)& (0+127)
   120  0016  01AD               	clrf	(__pbssBANK0+2)& (0+127)
   121  0017                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  0017                     __end_of__initialization:	
   125  0017  0183               	clrf	3
   126  0018  2819               	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0076                     __pbssCOMMON:	
   130  0076                     _ADC:	
   131  0076                     	ds	2
   132  0078                     _cycle:	
   133  0078                     	ds	1
   134                           
   135                           	psect	bssBANK0
   136  002B                     __pbssBANK0:	
   137  002B                     _StartTime:	
   138  002B                     	ds	2
   139  002D                     _PWM:	
   140  002D                     	ds	1
   141                           
   142                           	psect	cstackCOMMON
   143  0070                     __pcstackCOMMON:	
   144  0070                     ?_initPWM:	
   145  0070                     ?_InitADC:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0070                     ?_ISR:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0070                     ??_ISR:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0070                     ?_main:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0070                     InitADC@Channel:	
   158                           ; 1 bytes @ 0x0
   159                           
   160                           
   161                           ; 1 bytes @ 0x0
   162  0070                     	ds	5
   163  0075                     ??_DELAY_us:	
   164  0075                     ??_DELAY_ms:	
   165                           ; 1 bytes @ 0x5
   166                           
   167  0075                     ??_initPWM:	
   168                           ; 1 bytes @ 0x5
   169                           
   170  0075                     ??_InitADC:	
   171                           ; 1 bytes @ 0x5
   172                           
   173  0075                     ??_GetADCValue:	
   174                           ; 1 bytes @ 0x5
   175                           
   176  0075                     ??___lwdiv:	
   177                           ; 1 bytes @ 0x5
   178                           
   179                           
   180                           ; 1 bytes @ 0x5
   181  0075                     	ds	1
   182  0076                     ??_DELAY_sec:	
   183                           
   184                           	psect	cstackBANK0
   185  0020                     __pcstackBANK0:	
   186                           ; 1 bytes @ 0x6
   187                           
   188  0020                     ?_DELAY_us:	
   189  0020                     ?___lwdiv:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0020                     DELAY_us@us_count:	
   193                           ; 2 bytes @ 0x0
   194                           
   195  0020                     ___lwdiv@divisor:	
   196                           ; 2 bytes @ 0x0
   197                           
   198                           
   199                           ; 2 bytes @ 0x0
   200  0020                     	ds	2
   201  0022                     ?_DELAY_ms:	
   202  0022                     ?_GetADCValue:	
   203                           ; 1 bytes @ 0x2
   204                           
   205  0022                     DELAY_ms@ms_count:	
   206                           ; 2 bytes @ 0x2
   207                           
   208  0022                     ___lwdiv@dividend:	
   209                           ; 2 bytes @ 0x2
   210                           
   211                           
   212                           ; 2 bytes @ 0x2
   213  0022                     	ds	2
   214  0024                     GetADCValue@Channel:	
   215  0024                     ___lwdiv@counter:	
   216                           ; 1 bytes @ 0x4
   217                           
   218                           
   219                           ; 1 bytes @ 0x4
   220  0024                     	ds	1
   221  0025                     ___lwdiv@quotient:	
   222                           
   223                           ; 2 bytes @ 0x5
   224  0025                     	ds	2
   225  0027                     ?_DELAY_sec:	
   226  0027                     DELAY_sec@sec_count:	
   227                           ; 1 bytes @ 0x7
   228                           
   229                           
   230                           ; 2 bytes @ 0x7
   231  0027                     	ds	2
   232  0029                     ??_main:	
   233                           
   234                           ; 1 bytes @ 0x9
   235  0029                     	ds	1
   236  002A                     main@i:	
   237                           
   238                           ; 1 bytes @ 0xA
   239  002A                     	ds	1
   240                           
   241                           	psect	maintext
   242  0019                     __pmaintext:	
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 111 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;  i               1   10[BANK0 ] unsigned char 
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : B00/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMMON   BANK0   BANK1
   262 ;;      Params:         0       0       0
   263 ;;      Locals:         0       1       0
   264 ;;      Temps:          0       1       0
   265 ;;      Totals:         0       2       0
   266 ;;Total ram usage:        2 bytes
   267 ;; Hardware stack levels required when called:    4
   268 ;; This function calls:
   269 ;;		_DELAY_ms
   270 ;;		_DELAY_sec
   271 ;;		_GetADCValue
   272 ;;		_InitADC
   273 ;;		___lwdiv
   274 ;;		_initPWM
   275 ;; This function is called by:
   276 ;;		Startup code after reset
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           
   281                           ;psect for function _main
   282  0019                     _main:	
   283                           
   284                           ;main.c: 113: ANSEL = 0x00;
   285                           
   286                           ;incstack = 0
   287                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   288  0019  1683               	bsf	3,5	;RP0=1, select bank1
   289  001A  019F               	clrf	31	;volatile
   290                           
   291                           ;main.c: 114: ADCON0 = 0x00;
   292  001B  1283               	bcf	3,5	;RP0=0, select bank0
   293  001C  019F               	clrf	31	;volatile
   294                           
   295                           ;main.c: 115: CMCON = 0x07;
   296  001D  3007               	movlw	7
   297  001E  0099               	movwf	25	;volatile
   298                           
   299                           ;main.c: 116: VRCON = 0x00;
   300  001F  1683               	bsf	3,5	;RP0=1, select bank1
   301  0020  0199               	clrf	25	;volatile
   302                           
   303                           ;main.c: 117: TRISIO = 0x08;
   304  0021  3008               	movlw	8
   305  0022  0085               	movwf	5	;volatile
   306                           
   307                           ;main.c: 118: GPIO = 0x00;
   308  0023  1283               	bcf	3,5	;RP0=0, select bank0
   309  0024  0185               	clrf	5	;volatile
   310                           
   311                           ;main.c: 119: DELAY_ms(500);
   312  0025  30F4               	movlw	244
   313  0026  00A2               	movwf	DELAY_ms@ms_count
   314  0027  3001               	movlw	1
   315  0028  00A3               	movwf	DELAY_ms@ms_count+1
   316  0029  210A               	fcall	_DELAY_ms
   317                           
   318                           ;main.c: 120: initPWM();
   319  002A  2135               	fcall	_initPWM
   320                           
   321                           ;main.c: 121: GP2 = 1;
   322  002B  1283               	bcf	3,5	;RP0=0, select bank0
   323  002C  1505               	bsf	5,2	;volatile
   324                           
   325                           ;main.c: 123: InitADC(1);
   326  002D  3001               	movlw	1
   327  002E  212A               	fcall	_InitADC
   328                           
   329                           ;main.c: 126: unsigned char i;
   330                           ;main.c: 129: PWM = 127;
   331  002F  307F               	movlw	127
   332  0030  1283               	bcf	3,5	;RP0=0, select bank0
   333  0031  00A9               	movwf	??_main
   334  0032  0829               	movf	??_main,w
   335  0033  00AD               	movwf	_PWM
   336                           
   337                           ;main.c: 130: DELAY_ms(20);
   338  0034  3014               	movlw	20
   339  0035  00A2               	movwf	DELAY_ms@ms_count
   340  0036  3000               	movlw	0
   341  0037  00A3               	movwf	DELAY_ms@ms_count+1
   342  0038  210A               	fcall	_DELAY_ms
   343                           
   344                           ;main.c: 131: StartTime = GetADCValue(1);
   345  0039  3001               	movlw	1
   346  003A  20A3               	fcall	_GetADCValue
   347  003B  1283               	bcf	3,5	;RP0=0, select bank0
   348  003C  0823               	movf	?_GetADCValue+1,w
   349  003D  00AC               	movwf	_StartTime+1
   350  003E  0822               	movf	?_GetADCValue,w
   351  003F  00AB               	movwf	_StartTime
   352                           
   353                           ;main.c: 133: {
   354                           ;main.c: 139: {
   355                           ;main.c: 141: }
   356                           ;main.c: 162: for(i = 26; i< 50; i+= 2)
   357                           
   358                           ;main.c: 132: while(1)
   359  0040  301A               	movlw	26
   360  0041  1283               	bcf	3,5	;RP0=0, select bank0
   361  0042  00A9               	movwf	??_main
   362  0043  0829               	movf	??_main,w
   363  0044  00AA               	movwf	main@i
   364  0045  3032               	movlw	50
   365  0046  022A               	subwf	main@i,w
   366  0047  1803               	btfsc	3,0
   367  0048  2865               	goto	l84
   368  0049                     l996:	
   369                           
   370                           ;main.c: 163: {
   371                           ;main.c: 164: PWM = i;
   372  0049  082A               	movf	main@i,w
   373  004A  00A9               	movwf	??_main
   374  004B  0829               	movf	??_main,w
   375  004C  00AD               	movwf	_PWM
   376                           
   377                           ;main.c: 165: DELAY_sec(StartTime/150);
   378  004D  3096               	movlw	150
   379  004E  00A0               	movwf	___lwdiv@divisor
   380  004F  3000               	movlw	0
   381  0050  00A1               	movwf	___lwdiv@divisor+1
   382  0051  082C               	movf	_StartTime+1,w
   383  0052  00A3               	movwf	___lwdiv@dividend+1
   384  0053  082B               	movf	_StartTime,w
   385  0054  00A2               	movwf	___lwdiv@dividend
   386  0055  2066               	fcall	___lwdiv
   387  0056  1283               	bcf	3,5	;RP0=0, select bank0
   388  0057  0821               	movf	?___lwdiv+1,w
   389  0058  00A8               	movwf	DELAY_sec@sec_count+1
   390  0059  0820               	movf	?___lwdiv,w
   391  005A  00A7               	movwf	DELAY_sec@sec_count
   392  005B  20F7               	fcall	_DELAY_sec
   393  005C  3002               	movlw	2
   394  005D  1283               	bcf	3,5	;RP0=0, select bank0
   395  005E  00A9               	movwf	??_main
   396  005F  0829               	movf	??_main,w
   397  0060  07AA               	addwf	main@i,f
   398  0061  3032               	movlw	50
   399  0062  022A               	subwf	main@i,w
   400  0063  1C03               	skipc
   401  0064  2849               	goto	l996
   402  0065                     l84:	
   403                           ;main.c: 166: }
   404                           ;main.c: 168: while(1);
   405                           
   406  0065  2865               	goto	l84
   407  0066                     __end_of_main:	
   408                           
   409                           	psect	text1
   410  0135                     __ptext1:	
   411 ;; *************** function _initPWM *****************
   412 ;; Defined at:
   413 ;;		line 32 in file "main.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;		None
   418 ;; Return value:  Size  Location     Type
   419 ;;                  1    wreg      void 
   420 ;; Registers used:
   421 ;;		wreg, status,2, status,0
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMMON   BANK0   BANK1
   427 ;;      Params:         0       0       0
   428 ;;      Locals:         0       0       0
   429 ;;      Temps:          1       0       0
   430 ;;      Totals:         1       0       0
   431 ;;Total ram usage:        1 bytes
   432 ;; Hardware stack levels used:    1
   433 ;; Hardware stack levels required when called:    1
   434 ;; This function calls:
   435 ;;		Nothing
   436 ;; This function is called by:
   437 ;;		_main
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           
   442                           ;psect for function _initPWM
   443  0135                     _initPWM:	
   444                           
   445                           ;main.c: 34: OPTION_REG &= 0xC0;
   446                           
   447                           ;incstack = 0
   448                           ; Regs used in _initPWM: [wreg+status,2+status,0]
   449  0135  30C0               	movlw	192
   450  0136  00F5               	movwf	??_initPWM
   451  0137  0875               	movf	??_initPWM,w
   452  0138  1683               	bsf	3,5	;RP0=1, select bank1
   453  0139  0581               	andwf	1,f	;volatile
   454                           
   455                           ;main.c: 36: T0IE = 1;
   456  013A  168B               	bsf	11,5	;volatile
   457                           
   458                           ;main.c: 37: GIE = 1;
   459  013B  178B               	bsf	11,7	;volatile
   460  013C  0008               	return
   461  013D                     __end_of_initPWM:	
   462                           
   463                           	psect	text2
   464  0066                     __ptext2:	
   465 ;; *************** function ___lwdiv *****************
   466 ;; Defined at:
   467 ;;		line 6 in file "/usr/microchip/xc8/v1.43/sources/common/lwdiv.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  divisor         2    0[BANK0 ] unsigned int 
   470 ;;  dividend        2    2[BANK0 ] unsigned int 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  quotient        2    5[BANK0 ] unsigned int 
   473 ;;  counter         1    4[BANK0 ] unsigned char 
   474 ;; Return value:  Size  Location     Type
   475 ;;                  2    0[BANK0 ] unsigned int 
   476 ;; Registers used:
   477 ;;		wreg, status,2, status,0
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMMON   BANK0   BANK1
   483 ;;      Params:         0       4       0
   484 ;;      Locals:         0       3       0
   485 ;;      Temps:          1       0       0
   486 ;;      Totals:         1       7       0
   487 ;;Total ram usage:        8 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; Hardware stack levels required when called:    1
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           
   498                           ;psect for function ___lwdiv
   499  0066                     ___lwdiv:	
   500                           
   501                           ;incstack = 0
   502                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   503  0066  1283               	bcf	3,5	;RP0=0, select bank0
   504  0067  01A5               	clrf	___lwdiv@quotient
   505  0068  01A6               	clrf	___lwdiv@quotient+1
   506  0069  0820               	movf	___lwdiv@divisor,w
   507  006A  0421               	iorwf	___lwdiv@divisor+1,w
   508  006B  1903               	btfsc	3,2
   509  006C  289E               	goto	l964
   510  006D  01A4               	clrf	___lwdiv@counter
   511  006E  0AA4               	incf	___lwdiv@counter,f
   512  006F                     l952:	
   513  006F  1BA1               	btfsc	___lwdiv@divisor+1,7
   514  0070  287D               	goto	l954
   515  0071  3001               	movlw	1
   516  0072                     u405:	
   517  0072  1003               	clrc
   518  0073  0DA0               	rlf	___lwdiv@divisor,f
   519  0074  0DA1               	rlf	___lwdiv@divisor+1,f
   520  0075  3EFF               	addlw	-1
   521  0076  1D03               	skipz
   522  0077  2872               	goto	u405
   523  0078  3001               	movlw	1
   524  0079  00F5               	movwf	??___lwdiv
   525  007A  0875               	movf	??___lwdiv,w
   526  007B  07A4               	addwf	___lwdiv@counter,f
   527  007C  286F               	goto	l952
   528  007D                     l954:	
   529  007D  3001               	movlw	1
   530  007E                     u425:	
   531  007E  1003               	clrc
   532  007F  0DA5               	rlf	___lwdiv@quotient,f
   533  0080  0DA6               	rlf	___lwdiv@quotient+1,f
   534  0081  3EFF               	addlw	-1
   535  0082  1D03               	skipz
   536  0083  287E               	goto	u425
   537  0084  0821               	movf	___lwdiv@divisor+1,w
   538  0085  0223               	subwf	___lwdiv@dividend+1,w
   539  0086  1D03               	skipz
   540  0087  288A               	goto	u435
   541  0088  0820               	movf	___lwdiv@divisor,w
   542  0089  0222               	subwf	___lwdiv@dividend,w
   543  008A                     u435:	
   544  008A  1C03               	skipc
   545  008B  2893               	goto	l960
   546  008C  0820               	movf	___lwdiv@divisor,w
   547  008D  02A2               	subwf	___lwdiv@dividend,f
   548  008E  0821               	movf	___lwdiv@divisor+1,w
   549  008F  1C03               	skipc
   550  0090  03A3               	decf	___lwdiv@dividend+1,f
   551  0091  02A3               	subwf	___lwdiv@dividend+1,f
   552  0092  1425               	bsf	___lwdiv@quotient,0
   553  0093                     l960:	
   554  0093  3001               	movlw	1
   555  0094                     u445:	
   556  0094  1003               	clrc
   557  0095  0CA1               	rrf	___lwdiv@divisor+1,f
   558  0096  0CA0               	rrf	___lwdiv@divisor,f
   559  0097  3EFF               	addlw	-1
   560  0098  1D03               	skipz
   561  0099  2894               	goto	u445
   562  009A  3001               	movlw	1
   563  009B  02A4               	subwf	___lwdiv@counter,f
   564  009C  1D03               	btfss	3,2
   565  009D  287D               	goto	l954
   566  009E                     l964:	
   567  009E  0826               	movf	___lwdiv@quotient+1,w
   568  009F  00A1               	movwf	?___lwdiv+1
   569  00A0  0825               	movf	___lwdiv@quotient,w
   570  00A1  00A0               	movwf	?___lwdiv
   571  00A2  0008               	return
   572  00A3                     __end_of___lwdiv:	
   573                           
   574                           	psect	text3
   575  012A                     __ptext3:	
   576 ;; *************** function _InitADC *****************
   577 ;; Defined at:
   578 ;;		line 40 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  Channel         1    wreg     unsigned char 
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  Channel         1    0[COMMON] unsigned char 
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1
   592 ;;      Params:         0       0       0
   593 ;;      Locals:         0       0       0
   594 ;;      Temps:          0       0       0
   595 ;;      Totals:         0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    1
   599 ;; This function calls:
   600 ;;		Nothing
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           
   607                           ;psect for function _InitADC
   608  012A                     _InitADC:	
   609                           
   610                           ;main.c: 42: ANSEL |= 0x02;
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _InitADC: [wreg+status,2]
   614  012A  1683               	bsf	3,5	;RP0=1, select bank1
   615  012B  149F               	bsf	31,1	;volatile
   616                           
   617                           ;main.c: 43: TRISIO |= 0x02;
   618  012C  1485               	bsf	5,1	;volatile
   619                           
   620                           ;main.c: 44: ADCON0 = 0x81;
   621  012D  3081               	movlw	129
   622  012E  1283               	bcf	3,5	;RP0=0, select bank0
   623  012F  009F               	movwf	31	;volatile
   624                           
   625                           ;main.c: 45: CMCON = 0x07;
   626  0130  3007               	movlw	7
   627  0131  0099               	movwf	25	;volatile
   628                           
   629                           ;main.c: 46: VRCON = 0x00;
   630  0132  1683               	bsf	3,5	;RP0=1, select bank1
   631  0133  0199               	clrf	25	;volatile
   632  0134  0008               	return
   633  0135                     __end_of_InitADC:	
   634                           
   635                           	psect	text4
   636  00A3                     __ptext4:	
   637 ;; *************** function _GetADCValue *****************
   638 ;; Defined at:
   639 ;;		line 58 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  Channel         1    wreg     unsigned char 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  Channel         1    4[BANK0 ] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  2    2[BANK0 ] unsigned int 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1
   653 ;;      Params:         0       2       0
   654 ;;      Locals:         0       1       0
   655 ;;      Temps:          1       0       0
   656 ;;      Totals:         1       3       0
   657 ;;Total ram usage:        4 bytes
   658 ;; Hardware stack levels used:    1
   659 ;; Hardware stack levels required when called:    2
   660 ;; This function calls:
   661 ;;		_DELAY_us
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _GetADCValue
   669  00A3                     _GetADCValue:	
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _GetADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   673                           ;GetADCValue@Channel stored from wreg
   674  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   675  00A4  00A4               	movwf	GetADCValue@Channel
   676                           
   677                           ;main.c: 60: ADCON0 &= 0xf3;
   678  00A5  30F3               	movlw	243
   679  00A6  00F5               	movwf	??_GetADCValue
   680  00A7  0875               	movf	??_GetADCValue,w
   681  00A8  059F               	andwf	31,f	;volatile
   682                           
   683                           ;main.c: 62: switch(Channel)
   684  00A9  28B8               	goto	l920
   685  00AA                     l910:	
   686                           ;main.c: 63: {
   687                           ;main.c: 64: case 0: ADCON0 |= 0x00; break;
   688                           
   689  00AA  081F               	movf	31,w	;volatile
   690  00AB  28C3               	goto	l922
   691  00AC                     l58:	
   692                           ;main.c: 65: case 1: ADCON0 |= 0x04; break;
   693                           
   694  00AC  151F               	bsf	31,2	;volatile
   695  00AD  28C3               	goto	l922
   696  00AE                     l59:	
   697                           ;main.c: 66: case 2: ADCON0 |= 0x08; break;
   698                           
   699  00AE  159F               	bsf	31,3	;volatile
   700  00AF  28C3               	goto	l922
   701  00B0                     l912:	
   702                           ;main.c: 67: case 3: ADCON0 |= 0x0c; break;
   703                           
   704  00B0  300C               	movlw	12
   705  00B1  00F5               	movwf	??_GetADCValue
   706  00B2  0875               	movf	??_GetADCValue,w
   707  00B3  049F               	iorwf	31,f	;volatile
   708  00B4  28C3               	goto	l922
   709  00B5                     l914:	
   710                           ;main.c: 69: default: return 0;
   711                           
   712  00B5  01A2               	clrf	?_GetADCValue
   713  00B6  01A3               	clrf	?_GetADCValue+1
   714  00B7  0008               	return
   715  00B8                     l920:	
   716                           ;main.c: 70: }
   717                           
   718  00B8  0824               	movf	GetADCValue@Channel,w
   719                           
   720                           ; Switch size 1, requested type "space"
   721                           ; Number of cases is 4, Range of values is 0 to 3
   722                           ; switch strategies available:
   723                           ; Name         Instructions Cycles
   724                           ; direct_byte           10     6 (fixed)
   725                           ; simple_byte           13     7 (average)
   726                           ; jumptable            260     6 (fixed)
   727                           ;	Chosen strategy is direct_byte
   728  00B9  0084               	movwf	4
   729  00BA  3004               	movlw	4
   730  00BB  0204               	subwf	4,w
   731  00BC  1803               	skipnc
   732  00BD  28B5               	goto	l914
   733  00BE  3001               	movlw	high S1024
   734  00BF  008A               	movwf	10
   735  00C0  303D               	movlw	low S1024
   736  00C1  0704               	addwf	4,w
   737  00C2  0082               	movwf	2
   738  00C3                     l922:	
   739                           
   740                           ;main.c: 72: DELAY_us(10);
   741  00C3  300A               	movlw	10
   742  00C4  00A0               	movwf	DELAY_us@us_count
   743  00C5  3000               	movlw	0
   744  00C6  00A1               	movwf	DELAY_us@us_count+1
   745  00C7  211D               	fcall	_DELAY_us
   746                           
   747                           ;main.c: 74: GO_nDONE = 1;
   748  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   749  00C9  149F               	bsf	31,1	;volatile
   750  00CA                     l63:	
   751                           ;main.c: 76: while(GO_nDONE);
   752                           
   753  00CA  189F               	btfsc	31,1	;volatile
   754  00CB  28CA               	goto	l63
   755                           
   756                           ;main.c: 78: return ((ADRESH<<8)+ADRESL);
   757  00CC  081E               	movf	30,w	;volatile
   758  00CD  00A3               	movwf	?_GetADCValue+1
   759  00CE  1683               	bsf	3,5	;RP0=1, select bank1
   760  00CF  081E               	movf	30,w	;volatile
   761  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   762  00D1  00A2               	movwf	?_GetADCValue
   763  00D2  0008               	return
   764  00D3                     __end_of_GetADCValue:	
   765                           
   766                           	psect	swtext1
   767  013D                     __pswtext1:	
   768  013D                     S1024:	
   769  013D  28AA               	ljmp	l910
   770  013E  28AC               	ljmp	l58
   771  013F  28AE               	ljmp	l59
   772  0140  28B0               	ljmp	l912
   773                           
   774                           	psect	text5
   775  00F7                     __ptext5:	
   776 ;; *************** function _DELAY_sec *****************
   777 ;; Defined at:
   778 ;;		line 102 in file "delay.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  sec_count       2    7[BANK0 ] unsigned int 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0, pclath, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1
   792 ;;      Params:         0       2       0
   793 ;;      Locals:         0       0       0
   794 ;;      Temps:          0       0       0
   795 ;;      Totals:         0       2       0
   796 ;;Total ram usage:        2 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    3
   799 ;; This function calls:
   800 ;;		_DELAY_ms
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           
   807                           ;psect for function _DELAY_sec
   808  00F7                     _DELAY_sec:	
   809  00F7                     l940:	
   810                           ;delay.c: 104: while (sec_count != 0) {
   811                           
   812                           ;incstack = 0
   813                           ; Regs used in _DELAY_sec: [wreg+status,2+status,0+pclath+cstack]
   814                           
   815  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   816  00F8  0827               	movf	DELAY_sec@sec_count,w
   817  00F9  0428               	iorwf	DELAY_sec@sec_count+1,w
   818  00FA  1903               	btfsc	3,2
   819  00FB  0008               	return
   820                           
   821                           ;delay.c: 105: DELAY_ms(1000);
   822  00FC  30E8               	movlw	232
   823  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   824  00FE  00A2               	movwf	DELAY_ms@ms_count
   825  00FF  3003               	movlw	3
   826  0100  00A3               	movwf	DELAY_ms@ms_count+1
   827  0101  210A               	fcall	_DELAY_ms
   828                           
   829                           ;delay.c: 106: sec_count--;
   830  0102  3001               	movlw	1
   831  0103  1283               	bcf	3,5	;RP0=0, select bank0
   832  0104  02A7               	subwf	DELAY_sec@sec_count,f
   833  0105  3000               	movlw	0
   834  0106  1C03               	skipc
   835  0107  03A8               	decf	DELAY_sec@sec_count+1,f
   836  0108  02A8               	subwf	DELAY_sec@sec_count+1,f
   837  0109  28F7               	goto	l940
   838  010A                     __end_of_DELAY_sec:	
   839                           
   840                           	psect	text6
   841  010A                     __ptext6:	
   842 ;; *************** function _DELAY_ms *****************
   843 ;; Defined at:
   844 ;;		line 75 in file "delay.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  ms_count        2    2[BANK0 ] unsigned int 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1
   858 ;;      Params:         0       2       0
   859 ;;      Locals:         0       0       0
   860 ;;      Temps:          0       0       0
   861 ;;      Totals:         0       2       0
   862 ;;Total ram usage:        2 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    2
   865 ;; This function calls:
   866 ;;		_DELAY_us
   867 ;; This function is called by:
   868 ;;		_main
   869 ;;		_DELAY_sec
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           
   874                           ;psect for function _DELAY_ms
   875  010A                     _DELAY_ms:	
   876  010A                     l906:	
   877                           ;delay.c: 77: while (ms_count != 0)
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
   881                           
   882  010A  1283               	bcf	3,5	;RP0=0, select bank0
   883  010B  0822               	movf	DELAY_ms@ms_count,w
   884  010C  0423               	iorwf	DELAY_ms@ms_count+1,w
   885  010D  1903               	btfsc	3,2
   886  010E  0008               	return
   887                           
   888                           ;delay.c: 78: {
   889                           ;delay.c: 79: DELAY_us(125);
   890  010F  307D               	movlw	125
   891  0110  1283               	bcf	3,5	;RP0=0, select bank0
   892  0111  00A0               	movwf	DELAY_us@us_count
   893  0112  3000               	movlw	0
   894  0113  00A1               	movwf	DELAY_us@us_count+1
   895  0114  211D               	fcall	_DELAY_us
   896                           
   897                           ;delay.c: 80: ms_count--;
   898  0115  3001               	movlw	1
   899  0116  1283               	bcf	3,5	;RP0=0, select bank0
   900  0117  02A2               	subwf	DELAY_ms@ms_count,f
   901  0118  3000               	movlw	0
   902  0119  1C03               	skipc
   903  011A  03A3               	decf	DELAY_ms@ms_count+1,f
   904  011B  02A3               	subwf	DELAY_ms@ms_count+1,f
   905  011C  290A               	goto	l906
   906  011D                     __end_of_DELAY_ms:	
   907                           
   908                           	psect	text7
   909  011D                     __ptext7:	
   910 ;; *************** function _DELAY_us *****************
   911 ;; Defined at:
   912 ;;		line 56 in file "delay.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  us_count        2    0[BANK0 ] unsigned int 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1
   926 ;;      Params:         0       2       0
   927 ;;      Locals:         0       0       0
   928 ;;      Temps:          0       0       0
   929 ;;      Totals:         0       2       0
   930 ;;Total ram usage:        2 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    1
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_GetADCValue
   937 ;;		_DELAY_ms
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           
   942                           ;psect for function _DELAY_us
   943  011D                     _DELAY_us:	
   944  011D                     l898:	
   945                           ;delay.c: 58: while (us_count != 0)
   946                           
   947                           ;incstack = 0
   948                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
   949                           
   950  011D  1283               	bcf	3,5	;RP0=0, select bank0
   951  011E  0820               	movf	DELAY_us@us_count,w
   952  011F  0421               	iorwf	DELAY_us@us_count+1,w
   953  0120  1903               	btfsc	3,2
   954  0121  0008               	return
   955                           
   956                           ;delay.c: 59: {
   957                           ;delay.c: 60: us_count--;
   958  0122  3001               	movlw	1
   959  0123  1283               	bcf	3,5	;RP0=0, select bank0
   960  0124  02A0               	subwf	DELAY_us@us_count,f
   961  0125  3000               	movlw	0
   962  0126  1C03               	skipc
   963  0127  03A1               	decf	DELAY_us@us_count+1,f
   964  0128  02A1               	subwf	DELAY_us@us_count+1,f
   965  0129  291D               	goto	l898
   966  012A                     __end_of_DELAY_us:	
   967                           
   968                           	psect	text8
   969  00D3                     __ptext8:	
   970 ;; *************** function _ISR *****************
   971 ;; Defined at:
   972 ;;		line 81 in file "main.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, status,2, status,0
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1
   986 ;;      Params:         0       0       0
   987 ;;      Locals:         0       0       0
   988 ;;      Temps:          5       0       0
   989 ;;      Totals:         5       0       0
   990 ;;Total ram usage:        5 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; This function calls:
   993 ;;		Nothing
   994 ;; This function is called by:
   995 ;;		Interrupt level 1
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           
  1000                           ;psect for function _ISR
  1001  00D3                     _ISR:	
  1002                           
  1003                           ;main.c: 83: cycle++;
  1004  00D3  3001               	movlw	1
  1005  00D4  00F0               	movwf	??_ISR
  1006  00D5  0870               	movf	??_ISR,w
  1007  00D6  07F8               	addwf	_cycle,f
  1008                           
  1009                           ;main.c: 84: if(T0IF)
  1010  00D7  1D0B               	btfss	11,2	;volatile
  1011  00D8  28EC               	goto	i1l75
  1012                           
  1013                           ;main.c: 85: {
  1014                           ;main.c: 86: if(GP0)
  1015  00D9  1C05               	btfss	5,0	;volatile
  1016  00DA  28E2               	goto	i1l830
  1017                           
  1018                           ;main.c: 87: {
  1019                           ;main.c: 88: TMR0 = PWM;
  1020  00DB  082D               	movf	_PWM,w
  1021  00DC  0081               	movwf	1	;volatile
  1022                           
  1023                           ;main.c: 89: if(cycle == 1)
  1024  00DD  0378               	decf	_cycle,w
  1025  00DE  1D03               	btfss	3,2
  1026  00DF  28EB               	goto	i1l836
  1027                           
  1028                           ;main.c: 90: {
  1029                           ;main.c: 91: GP0 = 0;
  1030  00E0  1005               	bcf	5,0	;volatile
  1031  00E1  28EA               	goto	i1l834
  1032  00E2                     i1l830:	
  1033                           ;main.c: 93: }
  1034                           ;main.c: 94: }
  1035                           
  1036                           ;main.c: 92: cycle = 0;
  1037                           
  1038                           
  1039                           ;main.c: 95: else
  1040                           ;main.c: 96: {
  1041                           ;main.c: 97: TMR0 = 255 - PWM;
  1042  00E2  032D               	decf	_PWM,w
  1043  00E3  3AFF               	xorlw	255
  1044  00E4  3EFF               	addlw	255
  1045  00E5  0081               	movwf	1	;volatile
  1046                           
  1047                           ;main.c: 98: if(cycle == 1)
  1048  00E6  0378               	decf	_cycle,w
  1049  00E7  1D03               	btfss	3,2
  1050  00E8  28EB               	goto	i1l836
  1051                           
  1052                           ;main.c: 99: {
  1053                           ;main.c: 100: GP0 = 1;
  1054  00E9  1405               	bsf	5,0	;volatile
  1055  00EA                     i1l834:	
  1056                           
  1057                           ;main.c: 101: cycle = 0;
  1058  00EA  01F8               	clrf	_cycle
  1059  00EB                     i1l836:	
  1060                           
  1061                           ;main.c: 102: }
  1062                           ;main.c: 103: }
  1063                           ;main.c: 104: T0IF = 0;
  1064  00EB  110B               	bcf	11,2	;volatile
  1065  00EC                     i1l75:	
  1066  00EC  0874               	movf	??_ISR+4,w
  1067  00ED  00FF               	movwf	127
  1068  00EE  0873               	movf	??_ISR+3,w
  1069  00EF  008A               	movwf	10
  1070  00F0  0872               	movf	??_ISR+2,w
  1071  00F1  0084               	movwf	4
  1072  00F2  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1073  00F3  0083               	movwf	3
  1074  00F4  0EFE               	swapf	126,f
  1075  00F5  0E7E               	swapf	126,w
  1076  00F6  0009               	retfie
  1077  00F7                     __end_of_ISR:	
  1078  007E                     btemp	set	126	;btemp
  1079  007E                     wtemp0	set	126
  1080                           
  1081                           	psect	intentry
  1082  0004                     __pintentry:	
  1083                           ;incstack = 0
  1084                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1085                           
  1086  0004                     interrupt_function:	
  1087  007E                     saved_w	set	btemp
  1088  0004  00FE               	movwf	btemp
  1089  0005  0E03               	swapf	3,w
  1090  0006  00F1               	movwf	??_ISR+1
  1091  0007  0804               	movf	4,w
  1092  0008  00F2               	movwf	??_ISR+2
  1093  0009  080A               	movf	10,w
  1094  000A  00F3               	movwf	??_ISR+3
  1095  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1096  000C  087F               	movf	btemp+1,w
  1097  000D  00F4               	movwf	??_ISR+4
  1098  000E  28D3               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80     11      14
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_GetADCValue
    _main->___lwdiv
    _main->_initPWM
    _DELAY_sec->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_DELAY_sec
    _GetADCValue->_DELAY_us
    _DELAY_sec->___lwdiv
    _DELAY_ms->_DELAY_us

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1550
                                              9 BANK0      2     2      0
                           _DELAY_ms
                          _DELAY_sec
                        _GetADCValue
                            _InitADC
                            ___lwdiv
                            _initPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GetADCValue                                          4     2      2     195
                                              5 COMMON     1     1      0
                                              2 BANK0      3     1      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _DELAY_sec                                            2     0      2     492
                                              7 BANK0      2     0      2
                           _DELAY_ms
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2     393
                                              2 BANK0      2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _DELAY_us                                             2     0      2     164
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _DELAY_sec
     _DELAY_ms
       _DELAY_us
     ___lwdiv (ARG)
   _GetADCValue
     _DELAY_us
   _InitADC
   ___lwdiv
   _initPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      B       E       4       17.5%
BANK1               20      0       0       5        0.0%
ABS                  0      0      17       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      17       8        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Oct 14 11:13:13 2017

                      pc 0002              __CFG_CP$OFF 0000                       l63 00CA  
                     l58 00AC                       l59 00AE                       l84 0065  
                     fsr 0004       __size_of_DELAY_sec 0013                      _ADC 0076  
                    l910 00AA                      l912 00B0                      l920 00B8  
                    l906 010A                      l914 00B5                      l922 00C3  
                    l940 00F7                      l960 0093                      l952 006F  
                    l954 007D                      l964 009E                      _GP0 0028  
                    _GP2 002A                      l898 011D                      _GIE 005F  
                    l996 0049                      u405 0072                      u425 007E  
           __CFG_CPD$OFF 0000                      u435 008A                      _ISR 00D3  
                    u445 0094                      _PWM 002D                      fsr0 0004  
     DELAY_sec@sec_count 0027                     S1024 013D                     ?_ISR 0070  
                   _T0IE 005D                     _T0IF 005A                     _GPIO 0005  
                   i1l75 00EC                     _TMR0 0001                     _main 0019  
                   btemp 007E            __CFG_BOREN$ON 0000              _GetADCValue 00A3  
                   start 000F         __end_of_DELAY_ms 011D         __end_of_DELAY_us 012A  
        __end_of_InitADC 0135                    ??_ISR 0070                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _CMCON 0019                    _ANSEL 009F  
        __end_of___lwdiv 00A3                    i1l830 00E2                    i1l834 00EA  
                  i1l836 00EB                    _VRCON 0099          __end_of_initPWM 013D  
                  _cycle 0078                    main@i 002A                    pclath 000A  
                  status 0003                    wtemp0 007E        __end_of_DELAY_sec 010A  
         __CFG_MCLRE$OFF 0000          __initialization 0010             __end_of_main 0066  
                 ??_main 0029                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E                   _TRISIO 0085                ??_InitADC 0075  
         __CFG_PWRTE$OFF 0000                ??___lwdiv 0075         DELAY_ms@ms_count 0022  
              ??_initPWM 0075                   saved_w 007E                ?_DELAY_ms 0022  
              ?_DELAY_us 0020  __end_of__initialization 0017           __pcstackCOMMON 0070  
             ??_DELAY_ms 0075               ??_DELAY_us 0075               __pbssBANK0 002B  
           ?_GetADCValue 0022               __pmaintext 0019               __pintentry 0004  
       DELAY_us@us_count 0020                  _InitADC 012A                _DELAY_sec 00F7  
                ___lwdiv 0066                  __ptext1 0135                  __ptext2 0066  
                __ptext3 012A                  __ptext4 00A3                  __ptext5 00F7  
                __ptext6 010A                  __ptext7 011D                  __ptext8 00D3  
           __size_of_ISR 0024                  _initPWM 0135     end_of_initialization 0017  
             ?_DELAY_sec 0027        __size_of_DELAY_ms 0013        __size_of_DELAY_us 000D  
   __size_of_GetADCValue 0030       GetADCValue@Channel 0024      start_initialization 0010  
            __end_of_ISR 00F7              ??_DELAY_sec 0076                _StartTime 002B  
            __pbssCOMMON 0076                ___latbits 0000            __pcstackBANK0 0020  
               ?_InitADC 0070         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
              __pswtext1 013D                 ?_initPWM 0070                 _DELAY_ms 010A  
               _DELAY_us 011D         ___lwdiv@quotient 0025        interrupt_function 0004  
               _GO_nDONE 00F9         __size_of_InitADC 000B         __size_of___lwdiv 003D  
       __size_of_initPWM 0008          ___lwdiv@divisor 0020          ___lwdiv@counter 0024  
          __size_of_main 004D            ??_GetADCValue 0075                 intlevel1 0000  
    __end_of_GetADCValue 00D3      __CFG_FOSC$INTOSCCLK 0000               _OPTION_REG 0081  
         InitADC@Channel 0070  
