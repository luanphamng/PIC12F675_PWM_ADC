

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Oct 13 17:57:13 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.42
    19                           ; Generated 13/04/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F683 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0019                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  008C                     	;# 
    71  008E                     	;# 
    72  0090                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0096                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84                           
    85                           	psect	nvCOMMON
    86  0077                     __pnvCOMMON:	
    87  0077                     _ADC:	
    88  0077                     	ds	2
    89  0079                     _PWM:	
    90  0079                     	ds	1
    91  0005                     _GPIO	set	5
    92  0001                     _TMR0	set	1
    93  001E                     _ADRESH	set	30
    94  0019                     _CMCON	set	25
    95  001F                     _ADCON0	set	31
    96  002A                     _GP2	set	42
    97  0028                     _GP0	set	40
    98  005A                     _T0IF	set	90
    99  00F9                     _GO_nDONE	set	249
   100  005F                     _GIE	set	95
   101  005D                     _T0IE	set	93
   102  009E                     _ADRESL	set	158
   103  0099                     _VRCON	set	153
   104  0085                     _TRISIO	set	133
   105  009F                     _ANSEL	set	159
   106  0081                     _OPTION_REG	set	129
   107                           
   108                           ; #config settings
   109  0000                     
   110                           	psect	cinit
   111  0010                     start_initialization:	
   112  0010                     __initialization:	
   113  0010                     end_of_initialization:	
   114                           ;End of C runtime variable initialization code
   115                           
   116  0010                     __end_of__initialization:	
   117  0010  0183               	clrf	3
   118  0011  2812               	ljmp	_main	;jump to C main() function
   119                           
   120                           	psect	cstackCOMMON
   121  0070                     __pcstackCOMMON:	
   122  0070                     ?_initPWM:	
   123  0070                     ?_InitADC:	
   124                           ; 1 bytes @ 0x0
   125                           
   126  0070                     ?_ISR:	
   127                           ; 1 bytes @ 0x0
   128                           
   129  0070                     ??_ISR:	
   130                           ; 1 bytes @ 0x0
   131                           
   132  0070                     ?_main:	
   133                           ; 1 bytes @ 0x0
   134                           
   135  0070                     InitADC@Channel:	
   136                           ; 1 bytes @ 0x0
   137                           
   138                           
   139                           ; 1 bytes @ 0x0
   140  0070                     	ds	4
   141  0074                     ?_CUS_delay_ms:	
   142  0074                     ??_initPWM:	
   143                           ; 1 bytes @ 0x4
   144                           
   145  0074                     ??_InitADC:	
   146                           ; 1 bytes @ 0x4
   147                           
   148  0074                     CUS_delay_ms@i:	
   149                           ; 1 bytes @ 0x4
   150                           
   151                           
   152                           ; 2 bytes @ 0x4
   153  0074                     	ds	2
   154  0076                     ??_CUS_delay_ms:	
   155  0076                     ??_GetADCValue:	
   156                           ; 1 bytes @ 0x6
   157                           
   158                           
   159                           ; 1 bytes @ 0x6
   160  0076                     	ds	1
   161                           
   162                           	psect	cstackBANK0
   163  0020                     __pcstackBANK0:	
   164  0020                     ?_GetADCValue:	
   165                           
   166                           ; 2 bytes @ 0x0
   167  0020                     	ds	2
   168  0022                     GetADCValue@Channel:	
   169                           
   170                           ; 1 bytes @ 0x2
   171  0022                     	ds	1
   172  0023                     ??_main:	
   173                           
   174                           ; 1 bytes @ 0x3
   175  0023                     	ds	1
   176                           
   177                           	psect	maintext
   178  0012                     __pmaintext:	
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 102 in file "main.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : B00/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMMON   BANK0   BANK1
   198 ;;      Params:         0       0       0
   199 ;;      Locals:         0       0       0
   200 ;;      Temps:          0       1       0
   201 ;;      Totals:         0       1       0
   202 ;;Total ram usage:        1 bytes
   203 ;; Hardware stack levels required when called:    3
   204 ;; This function calls:
   205 ;;		_CUS_delay_ms
   206 ;;		_GetADCValue
   207 ;;		_InitADC
   208 ;;		_initPWM
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           
   215                           ;psect for function _main
   216  0012                     _main:	
   217                           
   218                           ;main.c: 104: ANSEL = 0x00;
   219                           
   220                           ;incstack = 0
   221                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   222  0012  1683               	bsf	3,5	;RP0=1, select bank1
   223  0013  019F               	clrf	31	;volatile
   224                           
   225                           ;main.c: 105: ADCON0 = 0x00;
   226  0014  1283               	bcf	3,5	;RP0=0, select bank0
   227  0015  019F               	clrf	31	;volatile
   228                           
   229                           ;main.c: 106: CMCON = 0x07;
   230  0016  3007               	movlw	7
   231  0017  0099               	movwf	25	;volatile
   232                           
   233                           ;main.c: 107: VRCON = 0x00;
   234  0018  1683               	bsf	3,5	;RP0=1, select bank1
   235  0019  0199               	clrf	25	;volatile
   236                           
   237                           ;main.c: 108: TRISIO = 0x08;
   238  001A  3008               	movlw	8
   239  001B  0085               	movwf	5	;volatile
   240                           
   241                           ;main.c: 109: GPIO = 0x00;
   242  001C  1283               	bcf	3,5	;RP0=0, select bank0
   243  001D  0185               	clrf	5	;volatile
   244                           
   245                           ;main.c: 111: initPWM();
   246  001E  20A3               	fcall	_initPWM
   247                           
   248                           ;main.c: 112: GP2 = 1;
   249  001F  1283               	bcf	3,5	;RP0=0, select bank0
   250  0020  1505               	bsf	5,2	;volatile
   251                           
   252                           ;main.c: 114: InitADC(1);
   253  0021  3001               	movlw	1
   254  0022  2098               	fcall	_InitADC
   255                           
   256                           ;main.c: 118: PWM = 50;
   257  0023  3032               	movlw	50
   258  0024  1283               	bcf	3,5	;RP0=0, select bank0
   259  0025  00A3               	movwf	??_main
   260  0026  0823               	movf	??_main,w
   261  0027  00F9               	movwf	_PWM
   262  0028                     l765:	
   263                           ;main.c: 120: while(1)
   264                           
   265                           
   266                           ;main.c: 121: {
   267                           ;main.c: 122: ADC = GetADCValue(1);
   268  0028  3001               	movlw	1
   269  0029  2042               	fcall	_GetADCValue
   270  002A  1283               	bcf	3,5	;RP0=0, select bank0
   271  002B  0821               	movf	?_GetADCValue+1,w
   272  002C  00F8               	movwf	_ADC+1
   273  002D  0820               	movf	?_GetADCValue,w
   274  002E  00F7               	movwf	_ADC
   275                           
   276                           ;main.c: 128: {
   277                           ;main.c: 130: }
   278                           ;main.c: 131: GP2 = 0;
   279  002F  1105               	bcf	5,2	;volatile
   280                           
   281                           ;main.c: 132: CUS_delay_ms(1000);
   282  0030  30E8               	movlw	232
   283  0031  00F4               	movwf	CUS_delay_ms@i
   284  0032  3003               	movlw	3
   285  0033  00F5               	movwf	CUS_delay_ms@i+1
   286  0034  208B               	fcall	_CUS_delay_ms
   287                           
   288                           ;main.c: 133: GP2 = 1;
   289  0035  1283               	bcf	3,5	;RP0=0, select bank0
   290  0036  1505               	bsf	5,2	;volatile
   291                           
   292                           ;main.c: 134: CUS_delay_ms(1000);
   293  0037  30E8               	movlw	232
   294  0038  00F4               	movwf	CUS_delay_ms@i
   295  0039  3003               	movlw	3
   296  003A  00F5               	movwf	CUS_delay_ms@i+1
   297  003B  208B               	fcall	_CUS_delay_ms
   298                           
   299                           ;main.c: 135: PWM++;
   300  003C  3001               	movlw	1
   301  003D  1283               	bcf	3,5	;RP0=0, select bank0
   302  003E  00A3               	movwf	??_main
   303  003F  0823               	movf	??_main,w
   304  0040  07F9               	addwf	_PWM,f
   305  0041  2828               	goto	l765
   306  0042                     __end_of_main:	
   307                           
   308                           	psect	text1
   309  00A3                     __ptext1:	
   310 ;; *************** function _initPWM *****************
   311 ;; Defined at:
   312 ;;		line 31 in file "main.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;		None
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMMON   BANK0   BANK1
   326 ;;      Params:         0       0       0
   327 ;;      Locals:         0       0       0
   328 ;;      Temps:          1       0       0
   329 ;;      Totals:         1       0       0
   330 ;;Total ram usage:        1 bytes
   331 ;; Hardware stack levels used:    1
   332 ;; Hardware stack levels required when called:    1
   333 ;; This function calls:
   334 ;;		Nothing
   335 ;; This function is called by:
   336 ;;		_main
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           
   341                           ;psect for function _initPWM
   342  00A3                     _initPWM:	
   343                           
   344                           ;main.c: 33: OPTION_REG &= 0xC0;
   345                           
   346                           ;incstack = 0
   347                           ; Regs used in _initPWM: [wreg+status,2+status,0]
   348  00A3  30C0               	movlw	192
   349  00A4  00F4               	movwf	??_initPWM
   350  00A5  0874               	movf	??_initPWM,w
   351  00A6  1683               	bsf	3,5	;RP0=1, select bank1
   352  00A7  0581               	andwf	1,f	;volatile
   353                           
   354                           ;main.c: 35: T0IE = 1;
   355  00A8  168B               	bsf	11,5	;volatile
   356                           
   357                           ;main.c: 36: GIE = 1;
   358  00A9  178B               	bsf	11,7	;volatile
   359  00AA  0008               	return
   360  00AB                     __end_of_initPWM:	
   361                           
   362                           	psect	text2
   363  0098                     __ptext2:	
   364 ;; *************** function _InitADC *****************
   365 ;; Defined at:
   366 ;;		line 39 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;  Channel         1    wreg     unsigned char 
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  Channel         1    0[COMMON] unsigned char 
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMMON   BANK0   BANK1
   380 ;;      Params:         0       0       0
   381 ;;      Locals:         0       0       0
   382 ;;      Temps:          0       0       0
   383 ;;      Totals:         0       0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels used:    1
   386 ;; Hardware stack levels required when called:    1
   387 ;; This function calls:
   388 ;;		Nothing
   389 ;; This function is called by:
   390 ;;		_main
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           
   395                           ;psect for function _InitADC
   396  0098                     _InitADC:	
   397                           
   398                           ;main.c: 41: ANSEL |= 0x02;
   399                           
   400                           ;incstack = 0
   401                           ; Regs used in _InitADC: [wreg+status,2]
   402  0098  1683               	bsf	3,5	;RP0=1, select bank1
   403  0099  149F               	bsf	31,1	;volatile
   404                           
   405                           ;main.c: 42: TRISIO |= 0x02;
   406  009A  1485               	bsf	5,1	;volatile
   407                           
   408                           ;main.c: 43: ADCON0 = 0x81;
   409  009B  3081               	movlw	129
   410  009C  1283               	bcf	3,5	;RP0=0, select bank0
   411  009D  009F               	movwf	31	;volatile
   412                           
   413                           ;main.c: 44: CMCON = 0x07;
   414  009E  3007               	movlw	7
   415  009F  0099               	movwf	25	;volatile
   416                           
   417                           ;main.c: 45: VRCON = 0x00;
   418  00A0  1683               	bsf	3,5	;RP0=1, select bank1
   419  00A1  0199               	clrf	25	;volatile
   420  00A2  0008               	return
   421  00A3                     __end_of_InitADC:	
   422                           
   423                           	psect	text3
   424  0042                     __ptext3:	
   425 ;; *************** function _GetADCValue *****************
   426 ;; Defined at:
   427 ;;		line 57 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;  Channel         1    wreg     unsigned char 
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  Channel         1    2[BANK0 ] unsigned char 
   432 ;; Return value:  Size  Location     Type
   433 ;;                  2    0[BANK0 ] unsigned int 
   434 ;; Registers used:
   435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1
   441 ;;      Params:         0       2       0
   442 ;;      Locals:         0       1       0
   443 ;;      Temps:          1       0       0
   444 ;;      Totals:         1       3       0
   445 ;;Total ram usage:        4 bytes
   446 ;; Hardware stack levels used:    1
   447 ;; Hardware stack levels required when called:    2
   448 ;; This function calls:
   449 ;;		_CUS_delay_ms
   450 ;; This function is called by:
   451 ;;		_main
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           
   456                           ;psect for function _GetADCValue
   457  0042                     _GetADCValue:	
   458                           
   459                           ;incstack = 0
   460                           ; Regs used in _GetADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   461                           ;GetADCValue@Channel stored from wreg
   462  0042  1283               	bcf	3,5	;RP0=0, select bank0
   463  0043  00A2               	movwf	GetADCValue@Channel
   464                           
   465                           ;main.c: 59: ADCON0 &= 0xf3;
   466  0044  30F3               	movlw	243
   467  0045  00F6               	movwf	??_GetADCValue
   468  0046  0876               	movf	??_GetADCValue,w
   469  0047  059F               	andwf	31,f	;volatile
   470                           
   471                           ;main.c: 61: switch(Channel)
   472  0048  2857               	goto	l735
   473  0049                     l725:	
   474                           ;main.c: 62: {
   475                           ;main.c: 63: case 0: ADCON0 |= 0x00; break;
   476                           
   477  0049  081F               	movf	31,w	;volatile
   478  004A  2862               	goto	l737
   479  004B                     l54:	
   480                           ;main.c: 64: case 1: ADCON0 |= 0x04; break;
   481                           
   482  004B  151F               	bsf	31,2	;volatile
   483  004C  2862               	goto	l737
   484  004D                     l55:	
   485                           ;main.c: 65: case 2: ADCON0 |= 0x08; break;
   486                           
   487  004D  159F               	bsf	31,3	;volatile
   488  004E  2862               	goto	l737
   489  004F                     l727:	
   490                           ;main.c: 66: case 3: ADCON0 |= 0x0c; break;
   491                           
   492  004F  300C               	movlw	12
   493  0050  00F6               	movwf	??_GetADCValue
   494  0051  0876               	movf	??_GetADCValue,w
   495  0052  049F               	iorwf	31,f	;volatile
   496  0053  2862               	goto	l737
   497  0054                     l729:	
   498                           ;main.c: 68: default: return 0;
   499                           
   500  0054  01A0               	clrf	?_GetADCValue
   501  0055  01A1               	clrf	?_GetADCValue+1
   502  0056  0008               	return
   503  0057                     l735:	
   504                           ;main.c: 69: }
   505                           
   506  0057  0822               	movf	GetADCValue@Channel,w
   507                           
   508                           ; Switch size 1, requested type "space"
   509                           ; Number of cases is 4, Range of values is 0 to 3
   510                           ; switch strategies available:
   511                           ; Name         Instructions Cycles
   512                           ; direct_byte           10     6 (fixed)
   513                           ; simple_byte           13     7 (average)
   514                           ; jumptable            260     6 (fixed)
   515                           ;	Chosen strategy is direct_byte
   516  0058  0084               	movwf	4
   517  0059  3004               	movlw	4
   518  005A  0204               	subwf	4,w
   519  005B  1803               	skipnc
   520  005C  2854               	goto	l729
   521  005D  3000               	movlw	high S797
   522  005E  008A               	movwf	10
   523  005F  30AB               	movlw	low S797
   524  0060  0704               	addwf	4,w
   525  0061  0082               	movwf	2
   526  0062                     l737:	
   527                           
   528                           ;main.c: 71: CUS_delay_ms(10);
   529  0062  300A               	movlw	10
   530  0063  00F4               	movwf	CUS_delay_ms@i
   531  0064  3000               	movlw	0
   532  0065  00F5               	movwf	CUS_delay_ms@i+1
   533  0066  208B               	fcall	_CUS_delay_ms
   534                           
   535                           ;main.c: 73: GO_nDONE = 1;
   536  0067  1283               	bcf	3,5	;RP0=0, select bank0
   537  0068  149F               	bsf	31,1	;volatile
   538  0069                     l59:	
   539                           ;main.c: 75: while(GO_nDONE);
   540                           
   541  0069  189F               	btfsc	31,1	;volatile
   542  006A  2869               	goto	l59
   543                           
   544                           ;main.c: 77: return ((ADRESH<<8)+ADRESL);
   545  006B  081E               	movf	30,w	;volatile
   546  006C  00A1               	movwf	?_GetADCValue+1
   547  006D  1683               	bsf	3,5	;RP0=1, select bank1
   548  006E  081E               	movf	30,w	;volatile
   549  006F  1283               	bcf	3,5	;RP0=0, select bank0
   550  0070  00A0               	movwf	?_GetADCValue
   551  0071  0008               	return
   552  0072                     __end_of_GetADCValue:	
   553                           
   554                           	psect	swtext1
   555  00AB                     __pswtext1:	
   556  00AB                     S797:	
   557  00AB  2849               	ljmp	l725
   558  00AC  284B               	ljmp	l54
   559  00AD  284D               	ljmp	l55
   560  00AE  284F               	ljmp	l727
   561                           
   562                           	psect	text4
   563  008B                     __ptext4:	
   564 ;; *************** function _CUS_delay_ms *****************
   565 ;; Defined at:
   566 ;;		line 16 in file "main.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;  i               2    4[COMMON] unsigned int 
   569 ;; Auto vars:     Size  Location     Type
   570 ;;		None
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, status,2, status,0
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMMON   BANK0   BANK1
   580 ;;      Params:         2       0       0
   581 ;;      Locals:         0       0       0
   582 ;;      Temps:          0       0       0
   583 ;;      Totals:         2       0       0
   584 ;;Total ram usage:        2 bytes
   585 ;; Hardware stack levels used:    1
   586 ;; Hardware stack levels required when called:    1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_GetADCValue
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           
   596                           ;psect for function _CUS_delay_ms
   597  008B                     _CUS_delay_ms:	
   598  008B                     l721:	
   599                           ;main.c: 18: while(i--);
   600                           
   601                           ;incstack = 0
   602                           ; Regs used in _CUS_delay_ms: [wreg+status,2+status,0]
   603                           
   604  008B  3001               	movlw	1
   605  008C  02F4               	subwf	CUS_delay_ms@i,f
   606  008D  3000               	movlw	0
   607  008E  1C03               	skipc
   608  008F  03F5               	decf	CUS_delay_ms@i+1,f
   609  0090  02F5               	subwf	CUS_delay_ms@i+1,f
   610  0091  0A74               	incf	CUS_delay_ms@i,w
   611  0092  1D03               	skipz
   612  0093  288B               	goto	l721
   613  0094  0A75               	incf	CUS_delay_ms@i+1,w
   614  0095  1903               	btfsc	3,2
   615  0096  0008               	return
   616  0097  288B               	goto	l721
   617  0098                     __end_of_CUS_delay_ms:	
   618                           
   619                           	psect	text5
   620  0072                     __ptext5:	
   621 ;; *************** function _ISR *****************
   622 ;; Defined at:
   623 ;;		line 80 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1
   637 ;;      Params:         0       0       0
   638 ;;      Locals:         0       0       0
   639 ;;      Temps:          4       0       0
   640 ;;      Totals:         4       0       0
   641 ;;Total ram usage:        4 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		Interrupt level 1
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _ISR
   652  0072                     _ISR:	
   653                           
   654                           ;main.c: 82: if(T0IF)
   655  0072  1D0B               	btfss	11,2	;volatile
   656  0073  2880               	goto	i1l69
   657                           
   658                           ;main.c: 83: {
   659                           ;main.c: 84: if(GP0)
   660  0074  1C05               	btfss	5,0	;volatile
   661  0075  287A               	goto	i1l587
   662                           
   663                           ;main.c: 85: {
   664                           ;main.c: 86: TMR0 = PWM;
   665  0076  0879               	movf	_PWM,w
   666  0077  0081               	movwf	1	;volatile
   667                           
   668                           ;main.c: 87: GP0 = 0;
   669  0078  1005               	bcf	5,0	;volatile
   670                           
   671                           ;main.c: 88: }
   672  0079  287F               	goto	i1l591
   673  007A                     i1l587:	
   674                           
   675                           ;main.c: 89: else
   676                           ;main.c: 90: {
   677                           ;main.c: 91: TMR0 = 255 - PWM;
   678  007A  0379               	decf	_PWM,w
   679  007B  3AFF               	xorlw	255
   680  007C  3EFF               	addlw	255
   681  007D  0081               	movwf	1	;volatile
   682                           
   683                           ;main.c: 92: GP0 = 1;
   684  007E  1405               	bsf	5,0	;volatile
   685  007F                     i1l591:	
   686                           
   687                           ;main.c: 93: }
   688                           ;main.c: 95: T0IF = 0;
   689  007F  110B               	bcf	11,2	;volatile
   690  0080                     i1l69:	
   691  0080  0873               	movf	??_ISR+3,w
   692  0081  00FF               	movwf	127
   693  0082  0872               	movf	??_ISR+2,w
   694  0083  008A               	movwf	10
   695  0084  0871               	movf	??_ISR+1,w
   696  0085  0084               	movwf	4
   697  0086  0E70               	swapf	??_ISR^(0+-128),w
   698  0087  0083               	movwf	3
   699  0088  0EFE               	swapf	126,f
   700  0089  0E7E               	swapf	126,w
   701  008A  0009               	retfie
   702  008B                     __end_of_ISR:	
   703  007E                     btemp	set	126	;btemp
   704  007E                     wtemp0	set	126
   705                           
   706                           	psect	intentry
   707  0004                     __pintentry:	
   708                           ;incstack = 0
   709                           ; Regs used in _ISR: [wreg+status,2+status,0]
   710                           
   711  0004                     interrupt_function:	
   712  007E                     saved_w	set	btemp
   713  0004  00FE               	movwf	btemp
   714  0005  0E03               	swapf	3,w
   715  0006  00F0               	movwf	??_ISR
   716  0007  0804               	movf	4,w
   717  0008  00F1               	movwf	??_ISR+1
   718  0009  080A               	movf	10,w
   719  000A  00F2               	movwf	??_ISR+2
   720  000B  1283               	bcf	3,5	;RP0=0, select bank0
   721  000C  087F               	movf	btemp+1,w
   722  000D  00F3               	movwf	??_ISR+3
   723  000E  2872               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      4       4
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_GetADCValue
    _GetADCValue->_CUS_delay_ms

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_GetADCValue

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     483
                                              3 BANK0      1     1      0
                       _CUS_delay_ms
                        _GetADCValue
                            _InitADC
                            _initPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GetADCValue                                          4     2      2     257
                                              6 COMMON     1     1      0
                                              0 BANK0      3     1      2
                       _CUS_delay_ms
 ---------------------------------------------------------------------------------
 (2) _CUS_delay_ms                                         2     0      2     226
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CUS_delay_ms
   _GetADCValue
     _CUS_delay_ms
   _InitADC
   _initPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      4       4       4        5.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0       E       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       E       8        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Oct 13 17:57:13 2017

                      pc 0002              __CFG_CP$OFF 0000                       l54 004B  
                     l55 004D                       l59 0069                       fsr 0004  
                    S797 00AB                      _ADC 0077                      l721 008B  
                    l725 0049                      l727 004F                      l735 0057  
                    l729 0054                      l737 0062                      l765 0028  
                    _GP0 0028                      _GP2 002A                      _GIE 005F  
           __CFG_CPD$OFF 0000                      _ISR 0072                      _PWM 0079  
                    fsr0 0004                     ?_ISR 0070                     _T0IE 005D  
                   _T0IF 005A                     _GPIO 0005                     i1l69 0080  
                   _TMR0 0001                     _main 0012                     btemp 007E  
          __CFG_BOREN$ON 0000              _GetADCValue 0042                     start 000F  
        __end_of_InitADC 00A3                    ??_ISR 0070                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _CMCON 0019                    _ANSEL 009F  
                  i1l591 007F                    i1l587 007A                    _VRCON 0099  
        __end_of_initPWM 00AB                    pclath 000A                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 0010  
           __end_of_main 0042                   ??_main 0023                   _ADCON0 001F  
                 _ADRESH 001E                   _ADRESL 009E                   _TRISIO 0085  
              ??_InitADC 0074           __CFG_PWRTE$OFF 0000            ?_CUS_delay_ms 0074  
              ??_initPWM 0074                   saved_w 007E  __end_of__initialization 0010  
         __pcstackCOMMON 0070           ??_CUS_delay_ms 0076               __pnvCOMMON 0077  
           ?_GetADCValue 0020               __pmaintext 0012               __pintentry 0004  
                _InitADC 0098                  __ptext1 00A3                  __ptext2 0098  
                __ptext3 0042                  __ptext4 008B                  __ptext5 0072  
           __size_of_ISR 0019                  _initPWM 00A3     __end_of_CUS_delay_ms 0098  
   end_of_initialization 0010     __size_of_GetADCValue 0030       GetADCValue@Channel 0022  
    start_initialization 0010              __end_of_ISR 008B    __size_of_CUS_delay_ms 000D  
              ___latbits 0000            __pcstackBANK0 0020                 ?_InitADC 0070  
           _CUS_delay_ms 008B                __pswtext1 00AB                 ?_initPWM 0070  
      interrupt_function 0004                 _GO_nDONE 00F9         __size_of_InitADC 000B  
       __size_of_initPWM 0008            __size_of_main 0030            ??_GetADCValue 0076  
               intlevel1 0000      __end_of_GetADCValue 0072      __CFG_FOSC$INTOSCCLK 0000  
             _OPTION_REG 0081            CUS_delay_ms@i 0074           InitADC@Channel 0070  
